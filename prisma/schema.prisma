datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  binaryTargets   = ["debian-openssl-3.0.x", "rhel-openssl-3.0.x"]
}

// --- Modelos Requeridos por NextAuth Prisma Adapter --- 

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

// Modelo Session LIMPIO para NextAuth adapter
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Modelo User existente, verificar campos requeridos por adapter y añadir relación a ChatSession
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique // Hacer email opcional si el adapter lo maneja así
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[] // Relación a Session de NextAuth
  
  // Campos específicos de Notas-AI
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  profile       Profile?
  notes         Note[]    // Notas médicas del usuario
  phoneNumber   String?   // Campo para número telefónico

  @@index([email])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// --- Modelos Específicos de Notas-AI ---

model Profile {
  id           String   @id @default(uuid()) 
  userId       String   @unique 
  username     String? 
  avatarUrl    String? 
  specialty    String?  // Especialidad médica del usuario
  licenseNumber String? // Número de licencia médica
  institution  String?  // Institución donde trabaja
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Specialty {
  id          String   @id @default(uuid())
  name        String   @unique // Ej: "Cardiología", "Neurología"
  description String?  @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relaciones
  templates   Template[] // Plantillas asociadas a esta especialidad
  notes       Note[]     // Notas asociadas a esta especialidad
  
  @@index([name])
}

model Template {
  id          String   @id @default(uuid())
  name        String   // Ej: "Consulta Cardiológica", "Seguimiento Post-operatorio"
  content     String   @db.Text // Contenido de la plantilla
  specialtyId String
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relaciones
  specialty   Specialty @relation(fields: [specialtyId], references: [id], onDelete: Cascade)
  notes       Note[]    // Notas que usan esta plantilla
  
  @@index([specialtyId])
  @@index([name])
}

model Note {
  id          String   @id @default(uuid())
  title       String   // Título de la nota
  content     String   @db.Text // Contenido de la nota médica
  userId      String   // Usuario que creó la nota
  specialtyId String?  // Especialidad asociada (opcional)
  templateId  String?  // Plantilla usada (opcional)
  
  // Metadatos médicos
  patientId   String?  // ID del paciente (puede ser anónimo)
  patientName String?  // Nombre del paciente
  diagnosis   String?  // Diagnóstico
  treatment   String?  @db.Text // Tratamiento prescrito
  
  // Metadatos de la nota
  isPrivate   Boolean  @default(true) // Por defecto privadas
  tags        String[] // Tags para organizar las notas
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relaciones
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  specialty   Specialty? @relation(fields: [specialtyId], references: [id], onDelete: SetNull)
  template    Template? @relation(fields: [templateId], references: [id], onDelete: SetNull)
  
  @@index([userId])
  @@index([specialtyId])
  @@index([templateId])
  @@index([createdAt])
  @@index([patientId])
} 