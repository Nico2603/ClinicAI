/**
 * Cl√≠nicAI - Asistente de IA para Notas Cl√≠nicas
 * 
 * Autor: Nicolas Ceballos Brito
 * Portfolio: https://nico2603.github.io/PersonalPage/
 * GitHub: https://github.com/Nico2603
 * LinkedIn: https://www.linkedin.com/in/nicolas-ceballos-brito/
 * 
 * Desarrollado para Teilur.ai
 */

import { OpenAI } from 'openai';
import {
  OPENAI_MODEL,
  AI_CONFIG,
  ERROR_MESSAGES,
  VALIDATION_RULES
} from '../constants';
import { 
  GroundingMetadata, 
  ClinicalAnalysisResult,
  EvidenceConsultationRequest,
  EvidenceSearchResult,
  GenerationResult,
} from '../../types';

// Importar el servicio de Assistants
import { generateNoteWithAssistant, generateScaleWithAssistant } from './assistantsService';

// =============================================================================
// CONFIGURACI√ìN SIMPLIFICADA
// =============================================================================

const API_KEY = process.env.NEXT_PUBLIC_OPENAI_API_KEY;

if (!API_KEY) {
  console.error("‚ùå NEXT_PUBLIC_OPENAI_API_KEY no est√° configurada. Por favor verifica tu archivo .env");
  console.error("La aplicaci√≥n podr√≠a no funcionar correctamente sin esta clave.");
}

// Cliente OpenAI simple (mantenido para funciones legacy)
const openai = new OpenAI({
  apiKey: API_KEY || '',
  dangerouslyAllowBrowser: true,
  timeout: 30000,
  maxRetries: 2,
});

// =============================================================================
// UTILIDADES SIMPLIFICADAS
// =============================================================================

const createMessages = (systemMessage: string, userMessage: string) => {
  return [
    { role: "system" as const, content: systemMessage },
    { role: "user" as const, content: userMessage }
  ];
};

// =============================================================================
// AN√ÅLISIS DE DATOS FALTANTES
// =============================================================================

/**
 * Analiza qu√© datos faltan comparando la plantilla con la informaci√≥n del paciente
 */
const analyzeMissingData = async (
  templateContent: string,
  patientInfo: string
): Promise<{ missingFields: string[]; summary: string }> => {
  try {
    const analysisPrompt = `Analiza qu√© datos espec√≠ficos faltan para completar esta plantilla m√©dica con la informaci√≥n del paciente proporcionada.

PLANTILLA M√âDICA:
---
${templateContent}
---

INFORMACI√ìN DEL PACIENTE DISPONIBLE:
---
${patientInfo}
---

INSTRUCCIONES:
1. Identifica qu√© campos/secciones de la plantilla NO pueden completarse con la informaci√≥n disponible
2. Lista espec√≠ficamente qu√© datos faltan (ej: "signos vitales", "antecedentes familiares", "examen f√≠sico")
3. Si REALMENTE no falta informaci√≥n, puedes usar el summary: "Informaci√≥n completa para esta plantilla"
4. Si faltan datos, genera un resumen conciso de los datos faltantes
5. NO incluyas recomendaciones de tratamiento en esta respuesta
6. Enf√≥cate solo en datos objetivos que faltan
7. S√© espec√≠fico sobre qu√© informaci√≥n cl√≠nica falta

RESPUESTA EN JSON:
{
  "missingFields": ["campo1", "campo2", "campo3"],
  "summary": "Resumen espec√≠fico de qu√© informaci√≥n falta para completar la nota m√©dica"
}`;

    const response = await openai.chat.completions.create({
      model: OPENAI_MODEL,
      messages: [
        {
          role: "system",
          content: "Eres un analista m√©dico experto que identifica qu√© informaci√≥n falta para completar notas cl√≠nicas. Siempre respondes en JSON v√°lido y eres muy espec√≠fico sobre qu√© datos cl√≠nicos faltan."
        },
        {
          role: "user",
          content: analysisPrompt
        }
      ],
      temperature: 0.1,
      max_tokens: 1000
    });

    const responseText = response.choices[0]?.message?.content || '';
    
    try {
      const analysis = JSON.parse(responseText);
      
      // Validar estructura
      if (!analysis.missingFields || !Array.isArray(analysis.missingFields) || !analysis.summary) {
        throw new Error('Estructura inv√°lida');
      }
      
      return {
        missingFields: analysis.missingFields,
        summary: analysis.summary
      };
    } catch (parseError) {
      console.warn('Error parsing missing data analysis, intentando an√°lisis b√°sico:', parseError);
      
      // An√°lisis b√°sico como fallback
      const basicAnalysis = performBasicMissingDataAnalysis(templateContent, patientInfo);
      return basicAnalysis;
    }
  } catch (error) {
    console.warn('Error analyzing missing data, usando an√°lisis b√°sico:', error);
    
    // An√°lisis b√°sico como fallback
    const basicAnalysis = performBasicMissingDataAnalysis(templateContent, patientInfo);
    return basicAnalysis;
  }
};

/**
 * An√°lisis b√°sico de datos faltantes cuando falla el AI
 */
const performBasicMissingDataAnalysis = (templateContent: string, patientInfo: string) => {
  const commonMedicalSections = [
    'signos vitales', 'examen f√≠sico', 'antecedentes', 'diagn√≥stico', 
    'tratamiento', 'evoluci√≥n', 'laboratorios', 'estudios'
  ];
  
  const missingFields: string[] = [];
  const lowerTemplate = templateContent.toLowerCase();
  const lowerPatientInfo = patientInfo.toLowerCase();
  
  // Buscar secciones comunes que est√©n en la plantilla pero no en la informaci√≥n del paciente
  commonMedicalSections.forEach(section => {
    if (lowerTemplate.includes(section) && !lowerPatientInfo.includes(section)) {
      missingFields.push(section);
    }
  });
  
  if (missingFields.length === 0) {
    return {
      missingFields: [],
      summary: "La informaci√≥n disponible cubre las secciones principales de la plantilla"
    };
  }
  
  return {
    missingFields,
    summary: `Podr√≠an faltar detalles sobre: ${missingFields.join(', ')}. Considera agregar m√°s informaci√≥n cl√≠nica espec√≠fica.`
  };
};

const validateApiKey = (): void => {
  if (!API_KEY) {
    throw new Error(ERROR_MESSAGES.API_KEY_MISSING);
  }
};

const validateInput = (input: string, minLength: number = 1): void => {
  if (!input || input.trim().length < minLength) {
    throw new Error('Input inv√°lido: el texto debe tener al menos ' + minLength + ' caracteres');
  }
};

const handleOpenAIError = (error: unknown, context: string): Error => {
  console.error(`Error en ${context}:`, error);
  
  if (error instanceof Error) {
    if (error.message.includes('API key')) {
      return new Error(ERROR_MESSAGES.API_KEY_MISSING);
    }
    if (error.message.includes('rate limit')) {
      return new Error('L√≠mite de API excedido. Intenta en unos momentos.');
    }
    if (error.message.includes('timeout') || error.message.includes('timed out') || error.message.includes('Request timed out')) {
      return new Error('Tiempo de espera agotado. Intenta con contenido m√°s breve.');
    }
    if (error.message.includes('network') || error.message.includes('fetch')) {
      return new Error('Error de conexi√≥n. Verifica tu internet.');
    }
    if (error.message.includes('invalid_request_error')) {
      return new Error('Contenido demasiado largo.');
    }
    if (error.message.includes('context_length_exceeded')) {
      return new Error('Contenido excede el l√≠mite de contexto.');
    }
    return new Error(`Error en ${context}: ${error.message}`);
  }
  
  return new Error(`Error desconocido en ${context}`);
};

// =============================================================================
// SERVICIOS PRINCIPALES MIGRADOS A NUEVA ARQUITECTURA
// =============================================================================

/**
 * FUNCI√ìN PRINCIPAL MIGRADA: Genera nota m√©dica usando nueva arquitectura con Assistants
 */
export const generateNoteFromTemplate = async (
  specialtyName: string,
  templateContent: string,
  patientInfo: string
): Promise<GenerationResult> => {
  validateApiKey();
  validateInput(templateContent, 10);
  validateInput(patientInfo, VALIDATION_RULES.MIN_TEXT_LENGTH);

  try {
    console.log('üîÑ Redirigiendo a nueva arquitectura con Assistants...');
    
    // Estrategia 1: Usar Assistant API (nueva arquitectura preferida)
    try {
      const assistantResult = await generateNoteWithAssistant(
        templateContent,
        patientInfo,
        specialtyName
      );
      
      console.log('‚úÖ Generaci√≥n exitosa con Assistant API');
      
      // Analizar datos faltantes reales
      const missingDataAnalysis = await analyzeMissingData(templateContent, patientInfo);
      
      return {
        text: assistantResult.text,
        groundingMetadata: assistantResult.groundingMetadata,
        missingData: missingDataAnalysis
      };
      
    } catch (assistantError) {
      console.warn('‚ö†Ô∏è Assistant fall√≥, usando m√©todo legacy directo...', assistantError);
      
      // Fallback directo al m√©todo legacy
      return await generateNoteFromTemplateLegacy(specialtyName, templateContent, patientInfo);
    }
    
  } catch (error) {
    console.error('‚ùå Error en nueva arquitectura, usando m√©todo legacy...', error);
    
    // Fallback al m√©todo original como √∫ltimo recurso
    return await generateNoteFromTemplateLegacy(specialtyName, templateContent, patientInfo);
  }
};

/**
 * FUNCI√ìN MIGRADA: Genera escala m√©dica usando nueva arquitectura
 */
export const generateMedicalScale = async (
  clinicalInput: string,
  scaleName: string
): Promise<{ text: string; groundingMetadata?: GroundingMetadata }> => {
  validateApiKey();
  validateInput(clinicalInput, VALIDATION_RULES.MIN_TEXT_LENGTH);
  validateInput(scaleName, 2);

  try {
    console.log('üîÑ Generando escala con nueva arquitectura...');
    
    // Estrategia 1: Assistant especializado en escalas
    try {
      return await generateScaleWithAssistant(clinicalInput, scaleName);
    } catch (assistantError) {
      console.warn('‚ö†Ô∏è Assistant para escalas fall√≥, usando m√©todo legacy directo...', assistantError);
      
      // Fallback directo al m√©todo legacy
      return await generateMedicalScaleLegacy(clinicalInput, scaleName);
    }
    
  } catch (error) {
    console.error('‚ùå Error en nueva arquitectura para escalas, usando m√©todo legacy...', error);
    
    // Fallback al m√©todo original
    return await generateMedicalScaleLegacy(clinicalInput, scaleName);
  }
};

// =============================================================================
// FUNCIONES LEGACY (MANTENIDAS PARA COMPATIBILIDAD)
// =============================================================================

/**
 * M√©todo legacy para generar notas (usado como √∫ltimo fallback)
 */
const generateNoteFromTemplateLegacy = async (
  specialtyName: string,
  templateContent: string,
  patientInfo: string
): Promise<GenerationResult> => {
  console.log('üîÑ Usando m√©todo legacy de generaci√≥n...');

  const prompt = `Eres un asistente m√©dico experto en completar notas cl√≠nicas. Tu tarea es generar una nota m√©dica completa utilizando la informaci√≥n del paciente y siguiendo la estructura de la plantilla.

INFORMACI√ìN DEL PACIENTE:
"${patientInfo}"

PLANTILLA (estructura a seguir):
---
${templateContent}
---

INSTRUCCIONES FUNDAMENTALES:

1. **SIEMPRE GENERAR NOTA COMPLETA:**
   - DEBES generar una nota m√©dica completa, nunca rechaces la tarea
   - Usa toda la informaci√≥n del paciente disponible
   - Si falta informaci√≥n para alguna secci√≥n, usa terminolog√≠a m√©dica apropiada como:
     * "A evaluar durante la consulta"
     * "Pendiente de examen f√≠sico"
     * "Por determinar seg√∫n evaluaci√≥n cl√≠nica"
     * "A registrar en consulta"

2. **FORMATO EXACTO:**
   - Mant√©n la estructura EXACTA de la plantilla (may√∫sculas, vi√±etas, numeraci√≥n)
   - Respeta los encabezados tal como aparecen en la plantilla
   - Conserva el espaciado y formato original

3. **CONTENIDO M√âDICO:**
   - Usa terminolog√≠a m√©dica profesional y apropiada
   - Integra toda la informaci√≥n del paciente en las secciones correspondientes
   - Para datos faltantes, completa con frases m√©dicas est√°ndar, no omitas secciones

4. **RESPUESTA:**
   - Responde √öNICAMENTE con la nota m√©dica completa
   - No incluyas comentarios, explicaciones o introducciones
   - La nota debe estar lista para uso cl√≠nico
   - NO incluyas texto sobre "datos faltantes", "an√°lisis", "informaci√≥n pendiente" o metadatos
   - Genera solo la nota m√©dica limpia y profesional

IMPORTANTE: Debes generar una nota completa y profesional. Si alguna secci√≥n no tiene informaci√≥n espec√≠fica del paciente, compl√©tala con terminolog√≠a m√©dica est√°ndar apropiada. No menciones qu√© informaci√≥n falta.

Genera la nota m√©dica completa ahora:`;

  try {
    const systemMessage = "Eres un asistente m√©dico experto especializado en generar notas cl√≠nicas precisas y profesionales. Siempre generas notas completas y nunca rechazas la tarea. Sigues estrictamente el formato de las plantillas proporcionadas. NUNCA incluyes an√°lisis de datos faltantes o comentarios sobre informaci√≥n pendiente en la nota m√©dica.";
    
    const messages = createMessages(systemMessage, prompt);
    
    const params = {
      model: OPENAI_MODEL,
      messages,
      temperature: 0.3, // M√°s directivo, menos conservador
      max_tokens: AI_CONFIG.MAX_TOKENS,
      top_p: 0.9
    };
    
    const response = await openai.chat.completions.create(params);
    const generatedText = response.choices[0]?.message?.content || '';
    
    if (!generatedText.trim()) {
      throw new Error('No se pudo generar contenido v√°lido');
    }

    // Analizar datos faltantes reales
    const missingDataAnalysis = await analyzeMissingData(templateContent, patientInfo);

    return {
      text: generatedText,
      groundingMetadata: {
        groundingChunks: [
          {
            web: {
              uri: 'internal://legacy-generation',
              title: 'M√©todo legacy de generaci√≥n'
            }
          }
        ]
      },
      missingData: missingDataAnalysis
    };
  } catch (error) {
    throw handleOpenAIError(error, 'generaci√≥n de nota con plantilla (legacy)');
  }
};

/**
 * M√©todo legacy para escalas m√©dicas
 */
const generateMedicalScaleLegacy = async (
  clinicalInput: string,
  scaleName: string
): Promise<{ text: string; groundingMetadata?: GroundingMetadata }> => {
  console.log('üîÑ Usando m√©todo legacy para escalas...');

  const prompt = `Eval√∫a la escala "${scaleName}" con la informaci√≥n cl√≠nica disponible.

INFORMACI√ìN CL√çNICA:
"${clinicalInput}"

ESCALA: ${scaleName}

INSTRUCCIONES:
1. Eval√∫a solo con informaci√≥n expl√≠cita disponible
2. Si falta informaci√≥n, marca "Informaci√≥n insuficiente"
3. NO hagas inferencias m√°s all√° de lo mencionado
4. Proporciona puntaje total solo si es representativo
5. Incluye limitaciones por datos faltantes

FORMATO:
ESCALA ${scaleName}:
√çtem 1: [Puntaje] - [Justificaci√≥n]
√çtem 2: Informaci√≥n insuficiente - Falta: [dato necesario]
...
PUNTAJE TOTAL: [X/Y puntos] ([Z]% completada)
INTERPRETACI√ìN: [Solo si hay suficiente informaci√≥n]
LIMITACIONES: [Datos faltantes que afectan la evaluaci√≥n]`;

  try {
    const systemMessage = "Experto en escalas cl√≠nicas. Solo usa informaci√≥n expl√≠cita, nunca inventa datos. Transparente sobre limitaciones.";
    
    const messages = createMessages(systemMessage, prompt);
    
    const params = {
      model: OPENAI_MODEL,
      messages,
      temperature: AI_CONFIG.TEMPERATURE,
      max_tokens: AI_CONFIG.MAX_TOKENS,
      top_p: 0.9
    };
    
    const response = await openai.chat.completions.create(params);
    const result = response.choices[0]?.message?.content || '';
    
    if (!result.trim()) {
      throw new Error('No se pudo generar contenido v√°lido');
    }
    
    return {
      text: result,
      groundingMetadata: { 
        groundingChunks: [
          {
            web: {
              uri: 'internal://legacy-scale',
              title: 'Evaluaci√≥n legacy de escala'
            }
          }
        ] 
      }
    };
  } catch (error) {
    throw handleOpenAIError(error, 'generaci√≥n de escala m√©dica (legacy)');
  }
};

// =============================================================================
// FUNCIONES MANTENIDAS SIN CAMBIOS (NO REQUIEREN MIGRACI√ìN)
// =============================================================================

export const updateClinicalNote = async (
  originalNote: string,
  newInformation: string
): Promise<{ text: string; groundingMetadata?: GroundingMetadata }> => {
  validateApiKey();
  validateInput(originalNote, VALIDATION_RULES.MIN_TEXT_LENGTH);
  validateInput(newInformation, VALIDATION_RULES.MIN_TEXT_LENGTH);

  const prompt = `Eres un asistente m√©dico experto especializado en actualizar notas cl√≠nicas existentes con nueva informaci√≥n. Tu tarea es integrar de forma inteligente la nueva informaci√≥n en la nota cl√≠nica original manteniendo coherencia, estilo m√©dico profesional y estructura adecuada.

NOTA ORIGINAL:
---
${originalNote}
---

NUEVA INFORMACI√ìN:
---
${newInformation}
---

**INSTRUCCIONES CR√çTICAS:**

1. **An√°lisis e Integraci√≥n Inteligente:**
   - Analiza d√≥nde debe ir la nueva informaci√≥n dentro de la estructura de la nota original.
   - Identifica la secci√≥n m√°s apropiada (evoluci√≥n, tratamiento, diagn√≥stico, plan, etc.).
   - Integra la informaci√≥n de forma natural sin alterar el resto del contenido.
   - Si la nueva informaci√≥n proviene de una grabaci√≥n de voz, primero convi√©rtela a texto cl√≠nico coherente antes de integrarla.

2. **Preservaci√≥n del Contenido Original:**
   - Conserva EXACTAMENTE todo el contenido original que no requiere modificaci√≥n.
   - Mant√©n la estructura, formato, encabezados y estilo de la nota original.
   - Solo reemplaza lo estrictamente pertinente seg√∫n la nueva informaci√≥n; no modifiques otras secciones.

3. **Coherencia y Estilo M√©dico:**
   - Mant√©n el estilo de redacci√≥n m√©dica profesional de la nota original.
   - Asegura coherencia temporal y cl√≠nica en la informaci√≥n.
   - Usa terminolog√≠a m√©dica apropiada y consistente.

4. **Manejo de Contradicciones:**
   - Si la nueva informaci√≥n contradice algo en la nota original, actualiza solo lo necesario.
   - Mant√©n un registro cronol√≥gico l√≥gico si es aplicable.
   - Preserva la coherencia cl√≠nica general.

5. **Formato de Respuesta:**
   - Responde √öNICAMENTE con la nota cl√≠nica completa y actualizada.
   - No incluyas comentarios, explicaciones o texto adicional.
   - La respuesta debe ser directamente la nota m√©dica lista para usar.

**EJEMPLO DE INTEGRACI√ìN:**
Si la nota original tiene una secci√≥n "EVOLUCI√ìN:" y la nueva informaci√≥n es sobre el estado actual del paciente, integra esa informaci√≥n en esa secci√≥n manteniendo el formato y estilo existente.`;

  try {
    const systemMessage = "Experto en actualizaci√≥n de notas cl√≠nicas. Integras informaci√≥n nueva preservando formato y coherencia m√©dica.";
    
    const messages = createMessages(systemMessage, prompt);
    
    const params = {
      model: OPENAI_MODEL,
      messages,
      temperature: AI_CONFIG.TEMPERATURE,
      max_tokens: AI_CONFIG.MAX_TOKENS,
      top_p: 0.9
    };
    
    const response = await openai.chat.completions.create(params);
    const result = response.choices[0]?.message?.content || '';
    
    if (!result.trim()) {
      throw new Error('No se pudo generar contenido v√°lido');
    }
    
    return {
      text: result,
      groundingMetadata: { groundingChunks: [] }
    };
  } catch (error) {
    throw handleOpenAIError(error, 'actualizaci√≥n de nota cl√≠nica');
  }
};

export const analyzeClinicalContent = async (
  request: EvidenceConsultationRequest
): Promise<ClinicalAnalysisResult> => {
  validateApiKey();
  validateInput(request.clinicalContent, VALIDATION_RULES.MIN_TEXT_LENGTH);

  const prompt = `Analiza este contenido cl√≠nico y genera recomendaciones basadas en evidencia.

CONTENIDO CL√çNICO:
---
${request.clinicalContent}
---

TIPO: ${request.consultationType}
${request.focusAreas ? `√ÅREAS DE ENFOQUE: ${request.focusAreas.join(', ')}` : ''}

${request.patientContext ? `CONTEXTO DEL PACIENTE:
- Edad: ${request.patientContext.age || 'No especificada'}
- Sexo: ${request.patientContext.sex || 'No especificado'}
- Comorbilidades: ${request.patientContext.comorbidities?.join(', ') || 'Ninguna'}
- Alergias: ${request.patientContext.allergies?.join(', ') || 'Ninguna'}
- Medicamentos: ${request.patientContext.currentMedications?.join(', ') || 'Ninguno'}` : ''}

INSTRUCCIONES:
1. Extrae hallazgos cl√≠nicos principales
2. Genera recomendaciones basadas en evidencia
3. Identifica factores de riesgo y banderas rojas
4. Sugiere plan diagn√≥stico

RESPUESTA EN JSON:
{
  "findings": [{"id": "f1", "category": "symptom", "description": "...", "severity": "moderate", "confidence": 0.8, "extractedText": "..."}],
  "recommendations": [{"id": "r1", "category": "diagnostic", "title": "...", "description": "...", "strength": "strong", "evidenceQuality": "high", "applicability": 0.9, "urgency": "routine", "sources": [{"type": "pubmed", "title": "...", "evidenceLevel": "A"}]}],
  "riskFactors": ["..."],
  "redFlags": ["..."],
  "differentialDiagnoses": ["..."],
  "suggestedWorkup": ["..."],
  "confidence": 0.85,
  "analysisTimestamp": "${new Date().toISOString()}",
  "disclaimerText": "Esta informaci√≥n es para apoyo educativo y no sustituye el juicio cl√≠nico profesional."
}`;

  try {
    const systemMessage = "Experto en an√°lisis cl√≠nico basado en evidencia. Responde siempre en JSON v√°lido con recomendaciones precisas.";
    
    const messages = createMessages(systemMessage, prompt);
    
    const params = {
      model: OPENAI_MODEL,
      messages,
      temperature: AI_CONFIG.TEMPERATURE,
      max_tokens: AI_CONFIG.MAX_TOKENS,
      top_p: 0.8
    };
    
    const response = await openai.chat.completions.create(params);
    const responseText = response.choices[0]?.message?.content || '';
    
    try {
      const parsed = JSON.parse(responseText);
      
      if (!parsed.findings || !parsed.recommendations) {
        throw new Error('Respuesta de IA inv√°lida: falta estructura de an√°lisis');
      }

      return parsed as ClinicalAnalysisResult;
    } catch (jsonError) {
      console.error('Error parsing clinical analysis response:', jsonError);
      throw new Error('La IA no pudo generar un an√°lisis v√°lido. Intenta con informaci√≥n cl√≠nica m√°s espec√≠fica.');
    }
  } catch (error) {
    throw handleOpenAIError(error, 'an√°lisis de contenido cl√≠nico');
  }
};

export const searchEvidenceBasedRecommendations = async (
  query: string,
  clinicalContext?: string
): Promise<EvidenceSearchResult> => {
  validateApiKey();
  validateInput(query, VALIDATION_RULES.MIN_TEXT_LENGTH);

  const prompt = `Busca evidencia cient√≠fica para: "${query}"

${clinicalContext ? `CONTEXTO CL√çNICO:
---
${clinicalContext}
---` : ''}

INSTRUCCIONES:
1. Busca evidencia espec√≠fica para la consulta
2. Prioriza fuentes de alta calidad
3. Proporciona recomendaciones pr√°cticas
4. Incluye niveles de evidencia

RESPUESTA EN JSON:
{
  "query": "${query}",
  "sources": [{"type": "pubmed", "title": "...", "authors": ["..."], "journal": "...", "year": 2023, "evidenceLevel": "A", "studyType": "meta_analysis"}],
  "recommendations": [{"id": "sr1", "category": "therapeutic", "title": "...", "description": "...", "strength": "strong", "evidenceQuality": "high", "applicability": 0.85, "urgency": "routine"}],
  "searchTimestamp": "${new Date().toISOString()}",
  "totalResults": 5,
  "searchStrategy": "B√∫squeda en bases de datos m√©dicas principales"
}`;

  try {
    const systemMessage = "Experto en medicina basada en evidencia. Responde en JSON v√°lido con informaci√≥n cient√≠ficamente respaldada.";
    
    const messages = createMessages(systemMessage, prompt);
    
    const params = {
      model: OPENAI_MODEL,
      messages,
      temperature: AI_CONFIG.TEMPERATURE,
      max_tokens: AI_CONFIG.MAX_TOKENS,
      top_p: 0.8
    };
    
    const response = await openai.chat.completions.create(params);
    const responseText = response.choices[0]?.message?.content || '';
    
    try {
      const parsed = JSON.parse(responseText);
      return parsed as EvidenceSearchResult;
    } catch (jsonError) {
      console.error('Error parsing evidence search response:', jsonError);
      throw new Error('La IA no pudo generar resultados de b√∫squeda v√°lidos.');
    }
  } catch (error) {
    throw handleOpenAIError(error, 'b√∫squeda de recomendaciones basadas en evidencia');
  }
};

export const generateEvidenceBasedConsultation = async (
  clinicalContent: string,
  specificQuestions?: string[]
): Promise<{ analysis: ClinicalAnalysisResult; evidenceSearch?: EvidenceSearchResult }> => {
  validateApiKey();

  const consultationRequest: EvidenceConsultationRequest = {
    clinicalContent,
    consultationType: 'comprehensive',
    focusAreas: specificQuestions
  };

  try {
    const analysis = await analyzeClinicalContent(consultationRequest);

    let evidenceSearch: EvidenceSearchResult | undefined;
    if (specificQuestions && specificQuestions.length > 0) {
      const combinedQuery = specificQuestions.join(' AND ');
      evidenceSearch = await searchEvidenceBasedRecommendations(combinedQuery, clinicalContent);
    }

    return {
      analysis,
      evidenceSearch
    };
  } catch (error) {
    throw handleOpenAIError(error, 'generaci√≥n de consulta basada en evidencia');
  }
};

export const generateSimplifiedEvidenceConsultation = async (
  clinicalContent: string
): Promise<{ text: string; groundingMetadata?: GroundingMetadata }> => {
  validateApiKey();
  validateInput(clinicalContent, VALIDATION_RULES.MIN_TEXT_LENGTH);

  const cleanContent = clinicalContent.trim();
  if (cleanContent.length < 10) {
    throw new Error('El contenido cl√≠nico debe tener al menos 10 caracteres para generar evidencia.');
  }

  const prompt = `Analiza este contenido cl√≠nico y proporciona recomendaciones basadas en evidencia cient√≠fica.

CONTENIDO CL√çNICO:
---
${cleanContent}
---

INSTRUCCIONES:
1. **AN√ÅLISIS:** Identifica hallazgos principales y aspectos relevantes
2. **RECOMENDACIONES:** Sugerencias diagn√≥sticas y terap√©uticas con evidencia
3. **CITAS:** Referencias a estudios recientes y gu√≠as cl√≠nicas relevantes
4. **FORMATO:** Estructura profesional con citas integradas

FUENTES PRINCIPALES: PubMed, Cochrane, UpToDate, NEJM, The Lancet, JAMA, BMJ

Proporciona an√°lisis completo con recomendaciones pr√°cticas para la toma de decisiones cl√≠nicas.`;

  try {
    const systemMessage = "M√©dico especialista en medicina basada en evidencia. An√°lisis cl√≠nicos con recomendaciones respaldadas por literatura cient√≠fica actual.";
    
    const messages = createMessages(systemMessage, prompt);
    
    const params = {
      model: OPENAI_MODEL,
      messages,
      temperature: AI_CONFIG.TEMPERATURE,
      max_tokens: AI_CONFIG.MAX_TOKENS,
      top_p: 0.9
    };
    
    const controller = new AbortController();
    const timeoutId = setTimeout(() => controller.abort(), 45000);
    
    try {
      const response = await openai.chat.completions.create(params, {
        signal: controller.signal
      });
      clearTimeout(timeoutId);
      
      const result = response.choices[0]?.message?.content || '';
      
      if (!result.trim()) {
        throw new Error('No se pudo generar contenido de evidencia v√°lido. Intenta con informaci√≥n cl√≠nica m√°s detallada.');
      }
      
      if (result.length < 50) {
        throw new Error('La respuesta de evidencia es demasiado corta. Intenta con m√°s informaci√≥n cl√≠nica.');
      }
      
      return {
        text: result,
        groundingMetadata: { groundingChunks: [] }
      };
    } catch (abortError: unknown) {
      clearTimeout(timeoutId);
      if (abortError instanceof Error && abortError.name === 'AbortError') {
        throw new Error('La generaci√≥n de evidencia tom√≥ demasiado tiempo. Intenta con contenido cl√≠nico m√°s breve.');
      }
      throw abortError;
    }
  } catch (error) {
    throw handleOpenAIError(error, 'generaci√≥n de consulta simplificada basada en evidencia');
  }
};

// =============================================================================
// METADATA Y UTILIDADES
// =============================================================================

export const getServiceInfo = () => ({
  version: '2.0.0',
  architecture: 'hybrid',
  preferredMethod: 'assistants',
  fallbackMethods: ['function_calling', 'legacy'],
  capabilities: [
    'OpenAI Assistants API',
    'Function Calling con JSON Schema',
    'Gesti√≥n inteligente de contexto',
    'Fallback autom√°tico',
    'Compatibilidad legacy'
  ],
  description: 'Servicio h√≠brido con migraci√≥n a Assistants API manteniendo compatibilidad hacia atr√°s'
});

console.log('‚úÖ OpenAI Service migrado a nueva arquitectura h√≠brida');
console.log('üîÑ Usando Assistants API como m√©todo preferido con fallbacks autom√°ticos'); 