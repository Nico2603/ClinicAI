import { OpenAI } from 'openai';
import {
  OPENAI_MODEL,
  AI_CONFIG,
  ERROR_MESSAGES,
  VALIDATION_RULES
} from '../constants';
import { 
  GroundingMetadata, 
  ClinicalAnalysisResult,
  EvidenceConsultationRequest,
  EvidenceSearchResult,
  ClinicalFinding,
  ClinicalRecommendation
} from '../../types';

// =============================================================================
// CONFIGURACI√ìN SIMPLIFICADA
// =============================================================================

const API_KEY = process.env.NEXT_PUBLIC_OPENAI_API_KEY;

if (!API_KEY) {
  console.error("‚ùå NEXT_PUBLIC_OPENAI_API_KEY no est√° configurada. Por favor verifica tu archivo .env");
  console.error("La aplicaci√≥n podr√≠a no funcionar correctamente sin esta clave.");
}

// Cliente OpenAI simple
const openai = new OpenAI({
  apiKey: API_KEY || '',
  dangerouslyAllowBrowser: true,
  timeout: 30000,
  maxRetries: 2,
});

// =============================================================================
// UTILIDADES SIMPLIFICADAS
// =============================================================================

const createMessages = (systemMessage: string, userMessage: string) => {
  return [
    { role: "system" as const, content: systemMessage },
    { role: "user" as const, content: userMessage }
  ];
};

const validateApiKey = (): void => {
  if (!API_KEY) {
    throw new Error(ERROR_MESSAGES.API_KEY_MISSING);
  }
};

const validateInput = (input: string, minLength: number = 1): void => {
  if (!input || input.trim().length < minLength) {
    throw new Error('Input inv√°lido: el texto debe tener al menos ' + minLength + ' caracteres');
  }
};

const handleOpenAIError = (error: unknown, context: string): Error => {
  console.error(`Error en ${context}:`, error);
  
  if (error instanceof Error) {
    if (error.message.includes('API key')) {
      return new Error(ERROR_MESSAGES.API_KEY_MISSING);
    }
    if (error.message.includes('rate limit')) {
      return new Error('L√≠mite de API excedido. Intenta en unos momentos.');
    }
    if (error.message.includes('timeout') || error.message.includes('timed out') || error.message.includes('Request timed out')) {
      return new Error('Tiempo de espera agotado. Intenta con contenido m√°s breve.');
    }
    if (error.message.includes('network') || error.message.includes('fetch')) {
      return new Error('Error de conexi√≥n. Verifica tu internet.');
    }
    if (error.message.includes('invalid_request_error')) {
      return new Error('Contenido demasiado largo.');
    }
    if (error.message.includes('context_length_exceeded')) {
      return new Error('Contenido excede el l√≠mite de contexto.');
    }
    return new Error(`Error en ${context}: ${error.message}`);
  }
  
  return new Error(`Error desconocido en ${context}`);
};

// =============================================================================
// SERVICIOS PRINCIPALES
// =============================================================================

export const generateNoteFromTemplate = async (
  specialtyName: string,
  templateContent: string,
  patientInfo: string
): Promise<{ text: string; groundingMetadata?: GroundingMetadata }> => {
  validateApiKey();
  validateInput(templateContent, 10);
  validateInput(patientInfo, VALIDATION_RULES.MIN_TEXT_LENGTH);

  try {
    console.log('üîÑ Iniciando generaci√≥n modular de nota cl√≠nica...');
    
    // Paso 1: Extraer informaci√≥n subjetiva del paciente
    console.log('üìã Paso 1: Extrayendo informaci√≥n subjetiva...');
    const subjectiveResult = await extractSubjectiveInformation(patientInfo);
    const subjectiveInfo = subjectiveResult.text;
    
    // Paso 2: Generar an√°lisis cl√≠nico mejorado
    console.log('üî¨ Paso 2: Generando an√°lisis cl√≠nico...');
    const clinicalAnalysisResult = await generateClinicalAnalysis(patientInfo, subjectiveInfo);
    const clinicalAnalysis = clinicalAnalysisResult.text;
    
    // Paso 3: Analizar estructura de la plantilla
    console.log('üìù Paso 3: Analizando estructura de plantilla...');
    const templateStructureResult = await analyzeTemplateStructure(templateContent);
    const templateStructure = templateStructureResult.text;
    
    // Paso 4: Integrar todos los componentes en la nota final
    console.log('üîó Paso 4: Integrando componentes en nota final...');
    const finalNoteResult = await generateModularNote(
      templateContent,
      patientInfo,
      subjectiveInfo,
      clinicalAnalysis,
      templateStructure
    );
    
    console.log('‚úÖ Generaci√≥n modular completada exitosamente');
    
    return {
      text: finalNoteResult.text,
      groundingMetadata: {
        groundingChunks: [
          {
            web: {
              uri: 'internal://subjective-extraction',
              title: 'Informaci√≥n Subjetiva Extra√≠da'
            }
          },
          {
            web: {
              uri: 'internal://clinical-analysis',
              title: 'An√°lisis Cl√≠nico Mejorado'
            }
          },
          {
            web: {
              uri: 'internal://template-structure',
              title: 'Estructura de Plantilla Analizada'
            }
          }
        ]
      }
    };
  } catch (error) {
    console.error('‚ùå Error en generaci√≥n modular:', error);
    throw handleOpenAIError(error, 'generaci√≥n modular de nota con plantilla');
  }
};

export const generateMedicalScale = async (
  clinicalInput: string,
  scaleName: string
): Promise<{ text: string; groundingMetadata?: GroundingMetadata }> => {
  validateApiKey();
  validateInput(clinicalInput, VALIDATION_RULES.MIN_TEXT_LENGTH);
  validateInput(scaleName, 2);

  // Prompt optimizado para escalas m√©dicas
  const prompt = `Eval√∫a la escala "${scaleName}" con la informaci√≥n cl√≠nica disponible.

INFORMACI√ìN CL√çNICA:
"${clinicalInput}"

ESCALA: ${scaleName}

INSTRUCCIONES:
1. Eval√∫a solo con informaci√≥n expl√≠cita disponible
2. Si falta informaci√≥n, marca "Informaci√≥n insuficiente"
3. NO hagas inferencias m√°s all√° de lo mencionado
4. Proporciona puntaje total solo si es representativo
5. Incluye limitaciones por datos faltantes

FORMATO:
ESCALA ${scaleName}:
√çtem 1: [Puntaje] - [Justificaci√≥n]
√çtem 2: Informaci√≥n insuficiente - Falta: [dato necesario]
...
PUNTAJE TOTAL: [X/Y puntos] ([Z]% completada)
INTERPRETACI√ìN: [Solo si hay suficiente informaci√≥n]
LIMITACIONES: [Datos faltantes que afectan la evaluaci√≥n]`;

  try {
    const systemMessage = "Experto en escalas cl√≠nicas. Solo usa informaci√≥n expl√≠cita, nunca inventa datos. Transparente sobre limitaciones.";
    
    const messages = createMessages(systemMessage, prompt);
    
    const params = {
      model: OPENAI_MODEL,
      messages,
      temperature: AI_CONFIG.TEMPERATURE,
      max_tokens: AI_CONFIG.MAX_TOKENS,
      top_p: 0.9
    };
    
    const response = await openai.chat.completions.create(params);
    const result = response.choices[0]?.message?.content || '';
    
    if (!result.trim()) {
      throw new Error('No se pudo generar contenido v√°lido');
    }
    
    return {
      text: result,
      groundingMetadata: { groundingChunks: [] }
    };
  } catch (error) {
    throw handleOpenAIError(error, 'generaci√≥n de escala m√©dica');
  }
};

export const updateClinicalNote = async (
  originalNote: string,
  newInformation: string
): Promise<{ text: string; groundingMetadata?: GroundingMetadata }> => {
  validateApiKey();
  validateInput(originalNote, VALIDATION_RULES.MIN_TEXT_LENGTH);
  validateInput(newInformation, VALIDATION_RULES.MIN_TEXT_LENGTH);

  // Prompt optimizado para actualizaci√≥n de notas
  const prompt = `Eres un asistente m√©dico experto especializado en actualizar notas cl√≠nicas existentes con nueva informaci√≥n. Tu tarea es integrar de forma inteligente la nueva informaci√≥n en la nota cl√≠nica original manteniendo coherencia, estilo m√©dico profesional y estructura adecuada.

NOTA ORIGINAL:
---
${originalNote}
---

NUEVA INFORMACI√ìN:
---
${newInformation}
---

**INSTRUCCIONES CR√çTICAS:**

1. **An√°lisis e Integraci√≥n Inteligente:**
   - Analiza d√≥nde debe ir la nueva informaci√≥n dentro de la estructura de la nota original.
   - Identifica la secci√≥n m√°s apropiada (evoluci√≥n, tratamiento, diagn√≥stico, plan, etc.).
   - Integra la informaci√≥n de forma natural sin alterar el resto del contenido.
   - Si la nueva informaci√≥n proviene de una grabaci√≥n de voz, primero convi√©rtela a texto cl√≠nico coherente antes de integrarla.

2. **Preservaci√≥n del Contenido Original:**
   - Conserva EXACTAMENTE todo el contenido original que no requiere modificaci√≥n.
   - Mant√©n la estructura, formato, encabezados y estilo de la nota original.
   - Solo reemplaza lo estrictamente pertinente seg√∫n la nueva informaci√≥n; no modifiques otras secciones.

3. **Coherencia y Estilo M√©dico:**
   - Mant√©n el estilo de redacci√≥n m√©dica profesional de la nota original.
   - Asegura coherencia temporal y cl√≠nica en la informaci√≥n.
   - Usa terminolog√≠a m√©dica apropiada y consistente.

4. **Manejo de Contradicciones:**
   - Si la nueva informaci√≥n contradice algo en la nota original, actualiza solo lo necesario.
   - Mant√©n un registro cronol√≥gico l√≥gico si es aplicable.
   - Preserva la coherencia cl√≠nica general.

5. **Formato de Respuesta:**
   - Responde √öNICAMENTE con la nota cl√≠nica completa y actualizada.
   - No incluyas comentarios, explicaciones o texto adicional.
   - La respuesta debe ser directamente la nota m√©dica lista para usar.

**EJEMPLO DE INTEGRACI√ìN:**
Si la nota original tiene una secci√≥n "EVOLUCI√ìN:" y la nueva informaci√≥n es sobre el estado actual del paciente, integra esa informaci√≥n en esa secci√≥n manteniendo el formato y estilo existente.`;

  try {
    const systemMessage = "Especialista en actualizaci√≥n selectiva de notas cl√≠nicas. Preserva estructura original, modifica solo lo necesario.";
    
    const messages = createMessages(systemMessage, prompt);
    
    const params = {
      model: OPENAI_MODEL,
      messages,
      temperature: AI_CONFIG.TEMPERATURE,
      max_tokens: AI_CONFIG.MAX_TOKENS,
      top_p: 0.9
    };
    
    const response = await openai.chat.completions.create(params);
    const generatedText = response.choices[0]?.message?.content || '';
    
    return { 
      text: generatedText, 
      groundingMetadata: undefined
    };
  } catch (error) {
    throw handleOpenAIError(error, 'actualizaci√≥n selectiva de nota cl√≠nica');
  }
}; 

export const analyzeClinicalContent = async (
  request: EvidenceConsultationRequest
): Promise<ClinicalAnalysisResult> => {
  validateApiKey();
  validateInput(request.clinicalContent, VALIDATION_RULES.MIN_TEXT_LENGTH);

  // Prompt optimizado para an√°lisis cl√≠nico
  const prompt = `Analiza este contenido cl√≠nico y genera recomendaciones basadas en evidencia.

CONTENIDO CL√çNICO:
---
${request.clinicalContent}
---

TIPO: ${request.consultationType}
${request.focusAreas ? `√ÅREAS DE ENFOQUE: ${request.focusAreas.join(', ')}` : ''}

${request.patientContext ? `CONTEXTO DEL PACIENTE:
- Edad: ${request.patientContext.age || 'No especificada'}
- Sexo: ${request.patientContext.sex || 'No especificado'}
- Comorbilidades: ${request.patientContext.comorbidities?.join(', ') || 'Ninguna'}
- Alergias: ${request.patientContext.allergies?.join(', ') || 'Ninguna'}
- Medicamentos: ${request.patientContext.currentMedications?.join(', ') || 'Ninguno'}` : ''}

INSTRUCCIONES:
1. Extrae hallazgos cl√≠nicos principales
2. Genera recomendaciones basadas en evidencia
3. Identifica factores de riesgo y banderas rojas
4. Sugiere plan diagn√≥stico

RESPUESTA EN JSON:
{
  "findings": [{"id": "f1", "category": "symptom", "description": "...", "severity": "moderate", "confidence": 0.8, "extractedText": "..."}],
  "recommendations": [{"id": "r1", "category": "diagnostic", "title": "...", "description": "...", "strength": "strong", "evidenceQuality": "high", "applicability": 0.9, "urgency": "routine", "sources": [{"type": "pubmed", "title": "...", "evidenceLevel": "A"}]}],
  "riskFactors": ["..."],
  "redFlags": ["..."],
  "differentialDiagnoses": ["..."],
  "suggestedWorkup": ["..."],
  "confidence": 0.85,
  "analysisTimestamp": "${new Date().toISOString()}",
  "disclaimerText": "Esta informaci√≥n es para apoyo educativo y no sustituye el juicio cl√≠nico profesional."
}`;

  try {
    const systemMessage = "Experto en an√°lisis cl√≠nico basado en evidencia. Responde siempre en JSON v√°lido con recomendaciones precisas.";
    
    const messages = createMessages(systemMessage, prompt);
    
    const params = {
      model: OPENAI_MODEL,
      messages,
      temperature: AI_CONFIG.TEMPERATURE,
      max_tokens: AI_CONFIG.MAX_TOKENS,
      top_p: 0.8
    };
    
    const response = await openai.chat.completions.create(params);
    const responseText = response.choices[0]?.message?.content || '';
    
    try {
      const parsed = JSON.parse(responseText);
      
      if (!parsed.findings || !parsed.recommendations) {
        throw new Error('Respuesta de IA inv√°lida: falta estructura de an√°lisis');
      }

      return parsed as ClinicalAnalysisResult;
    } catch (jsonError) {
      console.error('Error parsing clinical analysis response:', jsonError);
      throw new Error('La IA no pudo generar un an√°lisis v√°lido. Intenta con informaci√≥n cl√≠nica m√°s espec√≠fica.');
    }
  } catch (error) {
    throw handleOpenAIError(error, 'an√°lisis de contenido cl√≠nico');
  }
};

export const searchEvidenceBasedRecommendations = async (
  query: string,
  clinicalContext?: string
): Promise<EvidenceSearchResult> => {
  validateApiKey();
  validateInput(query, VALIDATION_RULES.MIN_TEXT_LENGTH);

  // Prompt optimizado para b√∫squeda de evidencia
  const prompt = `Busca evidencia cient√≠fica para: "${query}"

${clinicalContext ? `CONTEXTO CL√çNICO:
---
${clinicalContext}
---` : ''}

INSTRUCCIONES:
1. Busca evidencia espec√≠fica para la consulta
2. Prioriza fuentes de alta calidad
3. Proporciona recomendaciones pr√°cticas
4. Incluye niveles de evidencia

RESPUESTA EN JSON:
{
  "query": "${query}",
  "sources": [{"type": "pubmed", "title": "...", "authors": ["..."], "journal": "...", "year": 2023, "evidenceLevel": "A", "studyType": "meta_analysis"}],
  "recommendations": [{"id": "sr1", "category": "therapeutic", "title": "...", "description": "...", "strength": "strong", "evidenceQuality": "high", "applicability": 0.85, "urgency": "routine"}],
  "searchTimestamp": "${new Date().toISOString()}",
  "totalResults": 5,
  "searchStrategy": "B√∫squeda en bases de datos m√©dicas principales"
}`;

  try {
    const systemMessage = "Experto en medicina basada en evidencia. Responde en JSON v√°lido con informaci√≥n cient√≠ficamente respaldada.";
    
    const messages = createMessages(systemMessage, prompt);
    
    const params = {
      model: OPENAI_MODEL,
      messages,
      temperature: AI_CONFIG.TEMPERATURE,
      max_tokens: AI_CONFIG.MAX_TOKENS,
      top_p: 0.8
    };
    
    const response = await openai.chat.completions.create(params);
    const responseText = response.choices[0]?.message?.content || '';
    
    try {
      const parsed = JSON.parse(responseText);
      return parsed as EvidenceSearchResult;
    } catch (jsonError) {
      console.error('Error parsing evidence search response:', jsonError);
      throw new Error('La IA no pudo generar resultados de b√∫squeda v√°lidos.');
    }
  } catch (error) {
    throw handleOpenAIError(error, 'b√∫squeda de recomendaciones basadas en evidencia');
  }
};

export const generateEvidenceBasedConsultation = async (
  clinicalContent: string,
  specificQuestions?: string[]
): Promise<{ analysis: ClinicalAnalysisResult; evidenceSearch?: EvidenceSearchResult }> => {
  validateApiKey();

  const consultationRequest: EvidenceConsultationRequest = {
    clinicalContent,
    consultationType: 'comprehensive',
    focusAreas: specificQuestions
  };

  try {
    const analysis = await analyzeClinicalContent(consultationRequest);

    let evidenceSearch: EvidenceSearchResult | undefined;
    if (specificQuestions && specificQuestions.length > 0) {
      const combinedQuery = specificQuestions.join(' AND ');
      evidenceSearch = await searchEvidenceBasedRecommendations(combinedQuery, clinicalContent);
    }

    return {
      analysis,
      evidenceSearch
    };
  } catch (error) {
    throw handleOpenAIError(error, 'generaci√≥n de consulta basada en evidencia');
  }
};

export const formatEvidenceBasedReport = async (
  analysisResult: ClinicalAnalysisResult,
  evidenceSearch?: EvidenceSearchResult,
  includeReferences: boolean = true
): Promise<string> => {
  let report = `**CONSULTA CL√çNICA BASADA EN EVIDENCIA**\n\n`;
  
  // Timestamp
  report += `Fecha del an√°lisis: ${new Date(analysisResult.analysisTimestamp).toLocaleString('es-ES')}\n`;
  report += `Confianza del an√°lisis: ${Math.round(analysisResult.confidence * 100)}%\n\n`;

  // Hallazgos cl√≠nicos principales
  if (analysisResult.findings.length > 0) {
    report += `**HALLAZGOS CL√çNICOS IDENTIFICADOS:**\n`;
    analysisResult.findings.forEach((finding, index) => {
      report += `${index + 1}. **${finding.category.toUpperCase()}**: ${finding.description}\n`;
      if (finding.severity) {
        report += `   - Severidad: ${finding.severity}\n`;
      }
      report += `   - Confianza: ${Math.round(finding.confidence * 100)}%\n\n`;
    });
  }

  // Banderas rojas
  if (analysisResult.redFlags.length > 0) {
    report += `**üö© BANDERAS ROJAS - ATENCI√ìN INMEDIATA:**\n`;
    analysisResult.redFlags.forEach(flag => {
      report += `‚Ä¢ ${flag}\n`;
    });
    report += `\n`;
  }

  // Recomendaciones principales
  if (analysisResult.recommendations.length > 0) {
    report += `**RECOMENDACIONES BASADAS EN EVIDENCIA:**\n\n`;
    
    // Agrupar por urgencia
    const immediateRecs = analysisResult.recommendations.filter(r => r.urgency === 'immediate');
    const urgentRecs = analysisResult.recommendations.filter(r => r.urgency === 'urgent');
    const routineRecs = analysisResult.recommendations.filter(r => r.urgency === 'routine');

    if (immediateRecs.length > 0) {
      report += `**INMEDIATAS:**\n`;
      immediateRecs.forEach((rec, index) => {
        report += `${index + 1}. **${rec.title}**\n`;
        report += `   ${rec.description}\n`;
        report += `   - Fuerza: ${rec.strength} | Calidad evidencia: ${rec.evidenceQuality}\n`;
        if (rec.contraindications && rec.contraindications.length > 0) {
          report += `   - Contraindicaciones: ${rec.contraindications.join(', ')}\n`;
        }
        report += `\n`;
      });
    }

    if (urgentRecs.length > 0) {
      report += `**URGENTES:**\n`;
      urgentRecs.forEach((rec, index) => {
        report += `${index + 1}. **${rec.title}**\n`;
        report += `   ${rec.description}\n`;
        report += `   - Fuerza: ${rec.strength} | Calidad evidencia: ${rec.evidenceQuality}\n\n`;
      });
    }

    if (routineRecs.length > 0) {
      report += `**RUTINARIAS:**\n`;
      routineRecs.forEach((rec, index) => {
        report += `${index + 1}. **${rec.title}**\n`;
        report += `   ${rec.description}\n`;
        report += `   - Fuerza: ${rec.strength} | Calidad evidencia: ${rec.evidenceQuality}\n\n`;
      });
    }
  }

  // Diagn√≥sticos diferenciales
  if (analysisResult.differentialDiagnoses.length > 0) {
    report += `**DIAGN√ìSTICOS DIFERENCIALES A CONSIDERAR:**\n`;
    analysisResult.differentialDiagnoses.forEach(dx => {
      report += `‚Ä¢ ${dx}\n`;
    });
    report += `\n`;
  }

  // Plan diagn√≥stico sugerido
  if (analysisResult.suggestedWorkup.length > 0) {
    report += `**PLAN DIAGN√ìSTICO SUGERIDO:**\n`;
    analysisResult.suggestedWorkup.forEach(study => {
      report += `‚Ä¢ ${study}\n`;
    });
    report += `\n`;
  }

  // Referencias principales (si se incluyen)
  if (includeReferences && analysisResult.recommendations.length > 0) {
    const allSources = analysisResult.recommendations
      .flatMap(rec => rec.sources)
      .filter((source, index, self) => 
        index === self.findIndex(s => s.title === source.title)
      );

    if (allSources.length > 0) {
      report += `**REFERENCIAS PRINCIPALES:**\n`;
      allSources.forEach((source, index) => {
        report += `${index + 1}. ${source.title}`;
        if (source.authors && source.authors.length > 0) {
          report += ` - ${source.authors.join(', ')}`;
        }
        if (source.journal && source.year) {
          report += ` (${source.journal}, ${source.year})`;
        }
        report += ` [Nivel evidencia: ${source.evidenceLevel}]\n`;
      });
      report += `\n`;
    }
  }

  // Evidencia adicional si existe
  if (evidenceSearch && evidenceSearch.recommendations.length > 0) {
    report += `**EVIDENCIA ADICIONAL ENCONTRADA:**\n`;
    evidenceSearch.recommendations.forEach((rec, index) => {
      report += `${index + 1}. ${rec.title}: ${rec.description}\n`;
    });
    report += `\n`;
  }

  // Disclaimer
  report += `**IMPORTANTE:**\n${analysisResult.disclaimerText}\n`;

  return report;
}; 

export const generateSimplifiedEvidenceConsultation = async (
  clinicalContent: string
): Promise<{ text: string; groundingMetadata?: GroundingMetadata }> => {
  validateApiKey();
  validateInput(clinicalContent, VALIDATION_RULES.MIN_TEXT_LENGTH);

  // Prompt optimizado para consulta simplificada
  const prompt = `Analiza este contenido cl√≠nico y proporciona recomendaciones basadas en evidencia cient√≠fica.

CONTENIDO CL√çNICO:
---
${clinicalContent}
---

INSTRUCCIONES:
1. **AN√ÅLISIS:** Identifica hallazgos principales y aspectos relevantes
2. **RECOMENDACIONES:** Sugerencias diagn√≥sticas y terap√©uticas con evidencia
3. **CITAS:** Referencias a estudios recientes y gu√≠as cl√≠nicas relevantes
4. **FORMATO:** Estructura profesional con citas integradas

FUENTES PRINCIPALES: PubMed, Cochrane, UpToDate, NEJM, The Lancet, JAMA, BMJ

Proporciona an√°lisis completo con recomendaciones pr√°cticas para la toma de decisiones cl√≠nicas.`;

  try {
    const systemMessage = "M√©dico especialista en medicina basada en evidencia. An√°lisis cl√≠nicos con recomendaciones respaldadas por literatura cient√≠fica actual.";
    
    const messages = createMessages(systemMessage, prompt);
    
    const params = {
      model: OPENAI_MODEL,
      messages,
      temperature: AI_CONFIG.TEMPERATURE,
      max_tokens: AI_CONFIG.MAX_TOKENS,
      top_p: 0.9
    };
    
    const response = await openai.chat.completions.create(params);
    const result = response.choices[0]?.message?.content || '';
    
    if (!result.trim()) {
      throw new Error('No se pudo generar contenido v√°lido');
    }
    
    return {
      text: result,
      groundingMetadata: { groundingChunks: [] }
    };
  } catch (error) {
    throw handleOpenAIError(error, 'generaci√≥n de consulta basada en evidencia simplificada');
  }
};

// =============================================================================
// FUNCIONES MODULARES PARA GENERACI√ìN DE NOTAS
// =============================================================================

/**
 * Extrae y organiza la informaci√≥n subjetiva del paciente
 * (s√≠ntomas, molestias, lo que describe el paciente)
 */
export const extractSubjectiveInformation = async (
  patientInfo: string
): Promise<{ text: string; groundingMetadata?: GroundingMetadata }> => {
  validateApiKey();
  validateInput(patientInfo, VALIDATION_RULES.MIN_TEXT_LENGTH);

  const prompt = `Eres un m√©dico especialista en redacci√≥n cl√≠nica. Recibir√°s una historia cl√≠nica narrada de forma continua que puede incluir informaci√≥n sobre ingreso, evoluci√≥n, diagn√≥sticos, an√°lisis, subjetivo y objetivo mezclados, paracl√≠nicos, im√°genes.

INFORMACI√ìN DEL PACIENTE:
---
${patientInfo}
---

Tu tarea es:
1. LEER todo el texto cuidadosamente.
2. IDENTIFICAR y EXTRAER el fragmento que corresponde al **SUBJETIVO** del paciente: entendi√©ndolo como lo que es expl√≠citamente referido por el paciente tal como s√≠ntomas, molestias, lo que describe el paciente, sin interpretaciones ni diagn√≥sticos.
3. ORGANIZAR cada parte en frases claras y coherentes, manteniendo la l√≥gica m√©dica.
4. NO A√ëADIR datos nuevos que no est√©n en el texto original.
5. NO INVENTAR diagn√≥sticos ni signos cl√≠nicos adicionales.
6. NO utilizar informaci√≥n externa.

INSTRUCCIONES ESPEC√çFICAS:
- Extrae √öNICAMENTE lo que el paciente reporta subjetivamente
- Mant√©n las palabras exactas del paciente cuando sea posible
- Organiza los s√≠ntomas de forma cronol√≥gica si aplica
- Incluye caracter√≠sticas de los s√≠ntomas (intensidad, duraci√≥n, factores que mejoran/empeoran)
- Si no hay informaci√≥n subjetiva clara, indica "No se especifica informaci√≥n subjetiva del paciente"

FORMATO DE RESPUESTA:
Responde SOLO con la informaci√≥n subjetiva extra√≠da y organizada, sin comentarios adicionales.`;

  try {
    const systemMessage = "Especialista en extracci√≥n de informaci√≥n subjetiva de historias cl√≠nicas. Preservas exactamente lo que reporta el paciente sin a√±adir interpretaciones.";
    
    const messages = createMessages(systemMessage, prompt);
    
    const params = {
      model: OPENAI_MODEL,
      messages,
      temperature: 0.3, // Temperatura baja para preservar exactitud
      max_tokens: AI_CONFIG.MAX_TOKENS,
      top_p: 0.8
    };
    
    const response = await openai.chat.completions.create(params);
    const result = response.choices[0]?.message?.content || '';
    
    if (!result.trim()) {
      throw new Error('No se pudo extraer informaci√≥n subjetiva v√°lida');
    }
    
    return {
      text: result,
      groundingMetadata: { groundingChunks: [] }
    };
  } catch (error) {
    throw handleOpenAIError(error, 'extracci√≥n de informaci√≥n subjetiva');
  }
};

/**
 * Genera an√°lisis cl√≠nico mejorado basado en la informaci√≥n del paciente
 */
export const generateClinicalAnalysis = async (
  patientInfo: string,
  subjectiveInfo?: string
): Promise<{ text: string; groundingMetadata?: GroundingMetadata }> => {
  validateApiKey();
  validateInput(patientInfo, VALIDATION_RULES.MIN_TEXT_LENGTH);

  const prompt = `Eres un m√©dico especialista en redacci√≥n cl√≠nica. Tu tarea es generar un an√°lisis cl√≠nico profesional basado en la informaci√≥n del paciente.

INFORMACI√ìN COMPLETA DEL PACIENTE:
---
${patientInfo}
---

${subjectiveInfo ? `INFORMACI√ìN SUBJETIVA IDENTIFICADA:
---
${subjectiveInfo}
---` : ''}

Tu tarea es:
1. IDENTIFICAR y EXTRAER el fragmento que corresponde al **AN√ÅLISIS CL√çNICO**: interpretaciones, hip√≥tesis diagn√≥sticas, conclusiones del m√©dico.
2. En el apartado de an√°lisis cl√≠nico, vas a mejorar la redacci√≥n basado en la literatura y el lenguaje t√©cnico m√©dico, conservando el hilo conductor narrado.
3. Conservar la estructura del diagn√≥stico propuesto y encamin√°ndolo hacia el plan de manejo propuesto acorde con los diagn√≥sticos.
4. Conservar la l√≥gica m√©dica.
5. NO A√ëADIR datos nuevos que no est√©n en el texto original.
6. NO INVENTAR diagn√≥sticos ni signos cl√≠nicos adicionales.
7. NO utilizar informaci√≥n externa al caso.

INSTRUCCIONES ESPEC√çFICAS:
- Mejora la redacci√≥n t√©cnica manteniendo el contenido original
- Usa terminolog√≠a m√©dica precisa y actualizada
- Mant√©n la coherencia diagn√≥stica
- Estructura el an√°lisis de forma l√≥gica (presentaci√≥n ‚Üí interpretaci√≥n ‚Üí diagn√≥stico ‚Üí plan)
- Si no hay an√°lisis cl√≠nico claro, indica "Informaci√≥n insuficiente para an√°lisis cl√≠nico detallado"

FORMATO DE RESPUESTA:
Responde SOLO con el an√°lisis cl√≠nico mejorado, sin comentarios adicionales.`;

  try {
    const systemMessage = "Especialista en an√°lisis cl√≠nico y redacci√≥n m√©dica t√©cnica. Mejoras la presentaci√≥n profesional manteniendo fidelidad al contenido original.";
    
    const messages = createMessages(systemMessage, prompt);
    
    const params = {
      model: OPENAI_MODEL,
      messages,
      temperature: 0.4, // Temperatura moderada para mejorar redacci√≥n sin cambiar contenido
      max_tokens: AI_CONFIG.MAX_TOKENS,
      top_p: 0.9
    };
    
    const response = await openai.chat.completions.create(params);
    const result = response.choices[0]?.message?.content || '';
    
    if (!result.trim()) {
      throw new Error('No se pudo generar an√°lisis cl√≠nico v√°lido');
    }
    
    return {
      text: result,
      groundingMetadata: { groundingChunks: [] }
    };
  } catch (error) {
    throw handleOpenAIError(error, 'generaci√≥n de an√°lisis cl√≠nico');
  }
};

/**
 * Analiza y preserva la estructura de la plantilla
 */
export const analyzeTemplateStructure = async (
  templateContent: string
): Promise<{ text: string; groundingMetadata?: GroundingMetadata }> => {
  validateApiKey();
  validateInput(templateContent, 10);

  const prompt = `Eres un especialista en an√°lisis de estructuras de plantillas m√©dicas. Tu tarea es analizar la estructura de una plantilla y extraer su formato exacto.

PLANTILLA A ANALIZAR:
---
${templateContent}
---

Tu tarea es:
1. IDENTIFICAR la estructura exacta de la plantilla (encabezados, subsecciones, formato)
2. PRESERVAR todos los elementos de formato: may√∫sculas/min√∫sculas, vi√±etas, numeraci√≥n, sangr√≠as
3. IGNORAR completamente cualquier dato de ejemplo o ficticios en la plantilla
4. EXTRAER el esquema puro de la estructura

INSTRUCCIONES ESPEC√çFICAS:
- Identifica cada secci√≥n y subsecci√≥n
- Preserva el formato exacto (MAY√öSCULAS, min√∫sculas, vi√±etas -, n√∫meros 1., 2., etc.)
- Ignora datos de ejemplo como "[Nombre del paciente]", "Juan P√©rez", etc.
- Mant√©n la jerarqu√≠a y el orden de las secciones
- Identifica campos que requieren informaci√≥n del paciente vs campos fijos

FORMATO DE RESPUESTA:
Describe la estructura identificada de forma clara y organizada, preparada para ser usada como gu√≠a de formato.`;

  try {
    const systemMessage = "Especialista en an√°lisis de estructuras de documentos m√©dicos. Extraes el formato puro ignorando datos de ejemplo.";
    
    const messages = createMessages(systemMessage, prompt);
    
    const params = {
      model: OPENAI_MODEL,
      messages,
      temperature: 0.2, // Temperatura muy baja para preservar estructura exacta
      max_tokens: AI_CONFIG.MAX_TOKENS,
      top_p: 0.7
    };
    
    const response = await openai.chat.completions.create(params);
    const result = response.choices[0]?.message?.content || '';
    
    if (!result.trim()) {
      throw new Error('No se pudo analizar la estructura de la plantilla');
    }
    
    return {
      text: result,
      groundingMetadata: { groundingChunks: [] }
    };
  } catch (error) {
    throw handleOpenAIError(error, 'an√°lisis de estructura de plantilla');
  }
};

/**
 * Funci√≥n coordinadora que integra todos los componentes para generar la nota final
 */
export const generateModularNote = async (
  templateContent: string,
  patientInfo: string,
  subjectiveInfo: string,
  clinicalAnalysis: string,
  templateStructure: string
): Promise<{ text: string; groundingMetadata?: GroundingMetadata }> => {
  validateApiKey();
  validateInput(templateContent, 10);
  validateInput(patientInfo, VALIDATION_RULES.MIN_TEXT_LENGTH);

  const prompt = `Eres un especialista en generaci√≥n de notas cl√≠nicas que integra m√∫ltiples componentes especializados. Tu tarea es crear la nota final perfecta.

PLANTILLA ORIGINAL (solo para referencia de formato):
---
${templateContent}
---

ESTRUCTURA DE PLANTILLA ANALIZADA:
---
${templateStructure}
---

INFORMACI√ìN SUBJETIVA DEL PACIENTE:
---
${subjectiveInfo}
---

AN√ÅLISIS CL√çNICO MEJORADO:
---
${clinicalAnalysis}
---

INFORMACI√ìN COMPLETA DEL PACIENTE:
---
${patientInfo}
---

Tu tarea es:
1. **INTEGRAR** toda la informaci√≥n de forma coherente siguiendo la estructura de la plantilla
2. **COLOCAR** cada componente en la secci√≥n apropiada de la plantilla
3. **COMPLETAR** campos faltantes usando √∫nicamente la informaci√≥n del paciente disponible
4. **PRESERVAR** el formato exacto de la plantilla
5. **OMITIR** secciones donde no hay informaci√≥n disponible (sin indicar que falta)
6. **CREAR** una nota m√©dica profesional y completa

INSTRUCCIONES CR√çTICAS:
- Usa la estructura de plantilla como gu√≠a de formato EXACTO
- Integra la informaci√≥n subjetiva en las secciones apropiadas
- Coloca el an√°lisis cl√≠nico en las secciones de evaluaci√≥n/diagn√≥stico
- Completa otros campos con informaci√≥n del paciente disponible
- NO inventes informaci√≥n que no est√© en los datos proporcionados
- OMITE secciones sin informaci√≥n disponible
- Al final, bajo "OBSERVACIONES:", lista datos que faltan

FORMATO DE RESPUESTA:
Responde √öNICAMENTE con la nota m√©dica completada, lista para usar.`;

  try {
    const systemMessage = "Especialista en integraci√≥n de componentes cl√≠nicos para generar notas m√©dicas finales perfectas. Combinas informaci√≥n especializada manteniendo formato profesional.";
    
    const messages = createMessages(systemMessage, prompt);
    
    const params = {
      model: OPENAI_MODEL,
      messages,
      temperature: 0.3, // Temperatura controlada para integraci√≥n precisa
      max_tokens: AI_CONFIG.MAX_TOKENS,
      top_p: 0.9
    };
    
    const response = await openai.chat.completions.create(params);
    const result = response.choices[0]?.message?.content || '';
    
    if (!result.trim()) {
      throw new Error('No se pudo generar la nota integrada');
    }
    
    return {
      text: result,
      groundingMetadata: { groundingChunks: [] }
    };
  } catch (error) {
    throw handleOpenAIError(error, 'generaci√≥n de nota integrada');
  }
};

/**
 * Funci√≥n de respaldo con implementaci√≥n original (por si se necesita fallback)
 */
export const generateNoteFromTemplateFallback = async (
  specialtyName: string,
  templateContent: string,
  patientInfo: string
): Promise<{ text: string; groundingMetadata?: GroundingMetadata }> => {
  validateApiKey();
  validateInput(templateContent, 10);
  validateInput(patientInfo, VALIDATION_RULES.MIN_TEXT_LENGTH);

  // Prompt optimizado original
  const prompt = `Eres un asistente m√©dico experto en completar notas cl√≠nicas. Tu tarea es utilizar la informaci√≥n del paciente proporcionada para llenar una plantilla de nota m√©dica.

INFORMACI√ìN DEL PACIENTE:
"${patientInfo}"

PLANTILLA (formato √∫nicamente):
---
${templateContent}
---

INSTRUCCIONES CR√çTICAS:

1. **FORMATO ES SAGRADO:**
   - Respeta EXACTAMENTE el formato de la plantilla: estructura, encabezados, may√∫sculas/min√∫sculas, vi√±etas, numeraci√≥n, sangr√≠as, etc.
   - Si algo est√° en MAY√öSCULAS, mantenlo en MAY√öSCULAS.
   - Si algo est√° en min√∫sculas, mantenlo en min√∫sculas.
   - Si usa vi√±etas (-), mant√©n las vi√±etas.
   - Si usa numeraci√≥n (1., 2.), mant√©n la numeraci√≥n o si son n√∫meros romanos tambi√©n mantenlo.
   - La plantilla es solo un FORMATO/ESTRUCTURA, no contiene datos del paciente real.

2. **CONTENIDO:**
   - Usa √öNICAMENTE la informaci√≥n del paciente proporcionada.
   - NO inventes datos que no est√©n en la informaci√≥n del paciente.
   - Si falta informaci√≥n para una secci√≥n, no dejes nunca el √≠tem vac√≠o ni coloques nunca que falta un dato solo OMITE ESTA PARTE Y NO LA COLOQUES, al final de todo pon observaciones y un listado de datos que faltan y all√≠ los concatenas.
   - Usa terminolog√≠a m√©dica precisa y profesional.
   - Siempre colocarlo todo en el mismo orden de la plantilla.
   - Pon especial cuidado en la parte de √≠tems subjetivos y an√°lisis que no hay datos predeterminados all√≠ se pone algo con un √≠ndice de redacci√≥n pero apegado a la informaci√≥n que tenemos del paciente SIN ALUCINAR NI INVENTAR NADA.

3. **IMPORTANTE:**
   - La plantilla puede contener ejemplos como "[Nombre del paciente]" o datos ficticios - IGN√ìRALOS completamente.
   - Solo usa el FORMATO/ESTRUCTURA de la plantilla, nunca los datos de ejemplo.
   - Reemplaza todos los campos con informaci√≥n real del paciente o OMITE y no pongas el √≠tem si no hay datos.

4. **RESPUESTA:**
   - Responde SOLO con la nota m√©dica completada.
   - No agregues comentarios, explicaciones, ni introducciones.

La plantilla es una ESTRUCTURA/FORMATO que debes seguir, no una fuente de datos del paciente.

Genera la nota m√©dica completada:`;

  try {
    const systemMessage = "Eres un asistente m√©dico experto especializado en generar notas cl√≠nicas precisas y profesionales. Sigues estrictamente el formato de las plantillas proporcionadas, nunca datos de ejemplo de plantillas.";
    
    const messages = createMessages(systemMessage, prompt);
    
    const params = {
      model: OPENAI_MODEL,
      messages,
      temperature: AI_CONFIG.TEMPERATURE,
      max_tokens: AI_CONFIG.MAX_TOKENS,
      top_p: 0.9
    };
    
    const response = await openai.chat.completions.create(params);
    const generatedText = response.choices[0]?.message?.content || '';
    
    if (!generatedText.trim()) {
      throw new Error('No se pudo generar contenido v√°lido');
    }

    return { 
      text: generatedText, 
      groundingMetadata: undefined
    };
  } catch (error) {
    throw handleOpenAIError(error, 'generaci√≥n de nota con plantilla (fallback)');
  }
};

// =============================================================================
// UTILIDADES
// =============================================================================

export const validateOpenAIConfiguration = (): boolean => {
  return Boolean(API_KEY);
};

export const getOpenAIModelInfo = () => {
  return {
    model: OPENAI_MODEL,
    config: AI_CONFIG,
  };
}; 