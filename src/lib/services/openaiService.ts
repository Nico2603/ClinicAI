import { OpenAI } from 'openai';
import {
  OPENAI_MODEL_TEXT,
  OPENAI_MODEL_ADVANCED,
  OPENAI_MODEL_LATEST,
  OPENAI_MODEL_REASONING,
  MEDICAL_AI_MODELS,
  TEMPERATURE_CONFIG,
  TOKEN_LIMITS,
  ERROR_MESSAGES,
  VALIDATION_RULES
} from '../constants';
import { 
  GroundingMetadata, 
  ClinicalAnalysisResult,
  EvidenceConsultationRequest,
  EvidenceSearchResult,
  ClinicalFinding,
  ClinicalRecommendation
} from '../../types';

// =============================================================================
// CONFIGURACI√ìN Y VALIDACI√ìN
// =============================================================================

// Configuraci√≥n de OpenAI
const API_KEY = process.env.NEXT_PUBLIC_OPENAI_API_KEY;

if (!API_KEY) {
  console.error("‚ùå NEXT_PUBLIC_OPENAI_API_KEY no est√° configurada. Por favor verifica tu archivo .env");
  console.error("La aplicaci√≥n podr√≠a no funcionar correctamente sin esta clave.");
}

// Cliente OpenAI con timeout
const openai = new OpenAI({
  apiKey: API_KEY || '',
  dangerouslyAllowBrowser: true,
  timeout: 30000, // 30 segundos timeout
  maxRetries: 2, // M√°ximo 2 reintentos
});

// Funciones de validaci√≥n
const validateApiKey = (): void => {
  if (!API_KEY) {
    throw new Error(ERROR_MESSAGES.OPENAI_API_KEY_MISSING);
  }
};

const validateInput = (input: string, minLength: number = 1): void => {
  if (!input || input.trim().length < minLength) {
    throw new Error('Input inv√°lido: el texto debe tener al menos ' + minLength + ' caracteres');
  }
};

const validateTemplateInput = (templateContent: string, patientInfo: string): void => {
  validateInput(templateContent, 10);
  validateInput(patientInfo, VALIDATION_RULES.MIN_PATIENT_INFO_LENGTH);
  
  if (patientInfo.length > VALIDATION_RULES.MAX_PATIENT_INFO_LENGTH) {
    throw new Error('La informaci√≥n del paciente es demasiado larga');
  }
};

const validateClinicalInput = (clinicalInput: string): void => {
  validateInput(clinicalInput, VALIDATION_RULES.MIN_CLINICAL_INFO_LENGTH);
  
  if (clinicalInput.length > VALIDATION_RULES.MAX_CLINICAL_INFO_LENGTH) {
    throw new Error('La informaci√≥n cl√≠nica es demasiado larga');
  }
};

// Funci√≥n para manejar errores de OpenAI
const handleOpenAIError = (error: unknown, context: string): Error => {
  console.error(`Error en ${context}:`, error);
  
  if (error instanceof Error) {
    // Manejar errores espec√≠ficos de OpenAI
    if (error.message.includes('API key')) {
      return new Error(ERROR_MESSAGES.OPENAI_API_KEY_MISSING);
    }
    if (error.message.includes('rate limit')) {
      return new Error('L√≠mite de API excedido. Por favor, int√©ntelo m√°s tarde.');
    }
    if (error.message.includes('timeout') || error.message.includes('timed out')) {
      return new Error('El servicio tard√≥ demasiado en responder. Por favor, int√©ntelo de nuevo con menos contenido.');
    }
    if (error.message.includes('network') || error.message.includes('fetch')) {
      return new Error('Error de conexi√≥n. Verifique su conexi√≥n a internet.');
    }
    if (error.message.includes('invalid_request_error')) {
      return new Error('Solicitud inv√°lida. El contenido puede ser demasiado largo.');
    }
    if (error.message.includes('context_length_exceeded')) {
      return new Error('El contenido es demasiado largo. Por favor, reduce el tama√±o del texto.');
    }
    return new Error(`Error en ${context}: ${error.message}`);
  }
  
  return new Error(`Error desconocido en ${context}`);
};

// =============================================================================
// SERVICIOS PRINCIPALES
// =============================================================================

export const generateNoteFromTemplate = async (
  specialtyName: string,
  templateContent: string,
  patientInfo: string
): Promise<{ text: string; groundingMetadata?: GroundingMetadata }> => {
  validateApiKey();
  validateTemplateInput(templateContent, patientInfo);
  
  const prompt = `Eres un asistente m√©dico experto en completar notas cl√≠nicas. Tu tarea es utilizar √öNICAMENTE la informaci√≥n del paciente proporcionada para generar una nota m√©dica siguiendo el formato de la plantilla.

INFORMACI√ìN DEL PACIENTE:
"${patientInfo}"

PLANTILLA (SOLO FORMATO - NO CONTIENE DATOS REALES):
---
${templateContent}
---

üö® INSTRUCCIONES CR√çTICAS - CUMPLIMIENTO OBLIGATORIO:

1. **LA PLANTILLA ES SOLO UN FORMATO ESTRUCTURAL:**
   - La plantilla contiene √öNICAMENTE la estructura/formato que debes seguir
   - TODOS los datos en la plantilla son EJEMPLOS FICTICIOS que DEBES IGNORAR COMPLETAMENTE
   - Ejemplos como "[Nombre del paciente]", "Juan P√©rez", "45 a√±os", etc. son SOLO MARCADORES DE POSICI√ìN
   - NUNCA uses, copies o te bases en ning√∫n dato espec√≠fico de la plantilla
   - La plantilla NO ES una fuente de informaci√≥n sobre el paciente real

2. **FORMATO ESTRUCTURAL SAGRADO:**
   - Respeta EXACTAMENTE: encabezados, may√∫sculas/min√∫sculas, vi√±etas, numeraci√≥n, sangr√≠as, espacios
   - Conserva la jerarqu√≠a visual y organizaci√≥n de secciones
   - Mant√©n todos los elementos estructurales: dos puntos (:), guiones (-), n√∫meros (1., 2.), etc.

3. **CONTENIDO EXCLUSIVAMENTE REAL:**
   - Usa SOLO la informaci√≥n del paciente proporcionada en la secci√≥n "INFORMACI√ìN DEL PACIENTE"
   - NO inventes, asumas, deduzcas o completes datos faltantes
   - NO agregues informaci√≥n que no est√© expl√≠citamente mencionada
   - Si la informaci√≥n del paciente no menciona algo espec√≠fico, NO lo incluyas

4. **MANEJO DE INFORMACI√ìN FALTANTE:**
   - Si una secci√≥n de la plantilla no tiene informaci√≥n correspondiente en los datos del paciente, OMITE completamente esa secci√≥n
   - NO escribas: "Dato faltante", "No disponible", "A evaluar", "Pendiente", ni similares
   - NO dejes espacios en blanco ni marcadores de posici√≥n
   - Simplemente salta a la siguiente secci√≥n que s√≠ tenga informaci√≥n

5. **OBSERVACIONES PARA DATOS FALTANTES:**
   - Al final de la nota, crea una secci√≥n "OBSERVACIONES:"
   - Lista √öNICAMENTE las secciones/campos que no pudieron completarse por falta de informaci√≥n
   - Formato: "OBSERVACIONES: Secciones no completadas por falta de informaci√≥n: [lista espec√≠fica]"
   - Solo incluye esta secci√≥n si efectivamente hay datos faltantes

6. **EJEMPLOS DE LO QUE NO DEBES HACER:**
   ‚ùå Usar "Juan P√©rez" si aparece en la plantilla como ejemplo
   ‚ùå Copiar "45 a√±os" de la plantilla si no est√° en la informaci√≥n del paciente
   ‚ùå Escribir "Dato faltante" en ninguna parte
   ‚ùå Inventar signos vitales, medicamentos, o diagn√≥sticos
   ‚ùå Asumir informaci√≥n basada en s√≠ntomas mencionados

7. **RESPUESTA FINAL:**
   - Responde √öNICAMENTE con la nota m√©dica completada
   - No agregues comentarios, explicaciones, introducciones ni despedidas
   - La nota debe ser profesional y directamente utilizable

RECUERDA: La plantilla es un MOLDE VAC√çO que defines la forma, pero NUNCA el contenido. Los datos del paciente son la √öNICA fuente de informaci√≥n v√°lida.`;

  try {
    const response = await openai.chat.completions.create({
      model: MEDICAL_AI_MODELS.CRITICAL_MEDICAL_FUNCTIONS.generateNoteFromTemplate,
      messages: [
        {
          role: "system",
          content: "Eres un asistente m√©dico experto especializado en generar notas cl√≠nicas precisas y profesionales. NUNCA usas datos de las plantillas como informaci√≥n del paciente - las plantillas son SOLO formatos estructurales. Solo usas informaci√≥n expl√≠citamente proporcionada del paciente real y omites secciones sin datos correspondientes."
        },
        {
          role: "user",
          content: prompt
        }
      ],
      temperature: TEMPERATURE_CONFIG.CRITICAL_MEDICAL,
      max_tokens: TOKEN_LIMITS.CRITICAL_MEDICAL_NOTE,
      top_p: 0.9
    });

    const generatedText = response.choices[0]?.message?.content || '';
    
    if (!generatedText.trim()) {
      throw new Error('No se pudo generar contenido v√°lido');
    }

    return { 
      text: generatedText, 
      groundingMetadata: undefined
    };
  } catch (error) {
    throw handleOpenAIError(error, 'generaci√≥n de nota con plantilla');
  }
};



export const generateMedicalScale = async (
  clinicalInput: string,
  scaleName: string
): Promise<{ text: string; groundingMetadata?: GroundingMetadata }> => {
  validateApiKey();
  validateClinicalInput(clinicalInput);
  validateInput(scaleName, 2);

  const prompt = `Eres un asistente m√©dico experto en la aplicaci√≥n de escalas cl√≠nicas estandarizadas. Tu tarea es evaluar la escala "${scaleName}" bas√°ndote √öNICAMENTE en la informaci√≥n cl√≠nica proporcionada.

INFORMACI√ìN CL√çNICA DISPONIBLE:
"${clinicalInput}"

ESCALA A EVALUAR: ${scaleName}

üö® **INSTRUCCIONES CR√çTICAS PARA APLICACI√ìN DE ESCALAS:**

1. **AN√ÅLISIS ESTRICTO DE INFORMACI√ìN:**
   - Lee detenidamente SOLO la informaci√≥n cl√≠nica proporcionada
   - Identifica √∫nicamente los datos que correspondan a los √≠tems de la escala ${scaleName}
   - NO hagas inferencias o suposiciones m√°s all√° de lo expl√≠citamente mencionado

2. **PUNTUACI√ìN BASADA EN DATOS REALES:**
   - Asigna puntajes √öNICAMENTE bas√°ndote en informaci√≥n espec√≠fica disponible
   - Si la informaci√≥n para un √≠tem es insuficiente o no est√° disponible, marca claramente "Informaci√≥n insuficiente"
   - NO uses "juicio cl√≠nico" para inferir datos que no est√°n presentes
   - NO inventes o asumas informaci√≥n que no est√© expl√≠citamente mencionada

3. **MANEJO DE INFORMACI√ìN FALTANTE:**
   - Si faltan datos para evaluar √≠tems espec√≠ficos, NO los punt√∫es
   - Indica claramente qu√© √≠tems no pudieron evaluarse y por qu√©
   - NO asumas valores "normales" o "probables" para datos faltantes

4. **C√ÅLCULO DE PUNTAJE TOTAL:**
   - Solo incluye en el c√°lculo los √≠tems que pudieron evaluarse con informaci√≥n real
   - Si faltan datos cr√≠ticos para la escala, indica que el resultado puede ser incompleto
   - Menciona qu√© porcentaje de la escala pudo completarse

5. **INTERPRETACI√ìN RESPONSABLE:**
   - Solo proporciona interpretaci√≥n si el puntaje est√° basado en informaci√≥n suficiente
   - Si faltan datos importantes, indica las limitaciones de la interpretaci√≥n
   - No hagas conclusiones definitivas con informaci√≥n incompleta

6. **FORMATO DE RESPUESTA CLARO:**
   - Presenta cada √≠tem de la escala con su puntaje y justificaci√≥n
   - Indica claramente qu√© informaci√≥n se us√≥ para cada puntuaci√≥n
   - Lista los √≠tems que no pudieron evaluarse por falta de informaci√≥n
   - Proporciona puntaje total solo si es representativo

7. **ESTRUCTURA SUGERIDA:**
   
   ESCALA ${scaleName}:
   
   √çtem 1: [Puntaje] - Justificaci√≥n basada en: [dato espec√≠fico]
   √çtem 2: Informaci√≥n insuficiente - Falta: [dato espec√≠fico necesario]
   ...
   
   PUNTAJE TOTAL: [X/Y puntos] ([Z]% de la escala completada)
   
   INTERPRETACI√ìN: [Solo si hay suficiente informaci√≥n]
   
   LIMITACIONES: [Mencionar datos faltantes que afectan la evaluaci√≥n]

8. **RESPUESTA FINAL:**
   - Proporciona √öNICAMENTE el resultado de la escala
   - NO incluyas saludos, comentarios introductorios ni despedidas
   - La respuesta debe ser profesional y directamente utilizable

**REGLA FUNDAMENTAL:** Solo usa informaci√≥n expl√≠citamente proporcionada. Si no hay suficiente informaci√≥n para evaluar la escala completa, s√© transparente sobre las limitaciones.`;

  try {
    const response = await openai.chat.completions.create({
      model: MEDICAL_AI_MODELS.CRITICAL_MEDICAL_FUNCTIONS.generateMedicalScale,
      messages: [
        {
          role: "system",
          content: "Eres un asistente m√©dico experto en la aplicaci√≥n de escalas cl√≠nicas estandarizadas. SOLO usas informaci√≥n expl√≠citamente proporcionada para puntuar escalas, NUNCA inventas datos. Eres transparente sobre limitaciones cuando falta informaci√≥n."
        },
        {
          role: "user",
          content: prompt
        }
      ],
      temperature: TEMPERATURE_CONFIG.CLINICAL_REASONING,
      max_tokens: TOKEN_LIMITS.MEDICAL_SCALE,
      top_p: 0.9
    });

    const result = response.choices[0]?.message?.content || '';
    
    if (!result.trim()) {
      throw new Error('No se pudo generar contenido v√°lido');
    }
    
    return {
      text: result,
      groundingMetadata: { groundingChunks: [] }
    };
  } catch (error) {
    throw handleOpenAIError(error, 'generaci√≥n de escala m√©dica');
  }
};

// =============================================================================
// SERVICIOS ADICIONALES (mantener funcionalidad existente)
// =============================================================================

export const generateTemplateFromClinicalNote = async (
  clinicalNote: string
): Promise<{ text: string; groundingMetadata?: GroundingMetadata }> => {
  validateApiKey();
  validateClinicalInput(clinicalNote);

  const prompt = `Eres un experto en crear PLANTILLAS ESTRUCTURALES a partir de notas cl√≠nicas. Tu tarea es convertir la nota cl√≠nica en una plantilla que sirva como FORMATO PURO, eliminando TODOS los datos espec√≠ficos del paciente.

üéØ OBJETIVO: Crear una plantilla que sea un MOLDE ESTRUCTURAL VAC√çO, sin ning√∫n dato real del paciente.

NOTA CL√çNICA ORIGINAL:
---
${clinicalNote}
---

üö® INSTRUCCIONES CR√çTICAS PARA CREAR PLANTILLA FORMATO:

1. **PRESERVAR ESTRUCTURA EXACTA:**
   - Mant√©n EXACTAMENTE: encabezados, may√∫sculas/min√∫sculas, vi√±etas, numeraci√≥n, sangr√≠as
   - Conserva todos los elementos visuales: dos puntos (:), guiones (-), n√∫meros, espacios
   - Respeta la jerarqu√≠a y organizaci√≥n de secciones
   - NO cambies el orden ni elimines secciones estructurales

2. **ELIMINAR TODOS LOS DATOS ESPEC√çFICOS:**
   - Nombres de pacientes ‚Üí [Nombre del paciente]
   - Edades espec√≠ficas ‚Üí [Edad] a√±os
   - Fechas espec√≠ficas ‚Üí [Fecha]
   - N√∫meros de documento ‚Üí [Documento de identidad]
   - Diagn√≥sticos espec√≠ficos ‚Üí [Diagn√≥stico]
   - Medicamentos espec√≠ficos ‚Üí [Medicamento]
   - Valores de laboratorio ‚Üí [Valor de laboratorio]
   - Signos vitales ‚Üí [Signos vitales]
   - S√≠ntomas espec√≠ficos ‚Üí [S√≠ntoma]
   - Nombres de m√©dicos ‚Üí [Nombre del m√©dico]

3. **MARCADORES DESCRIPTIVOS GENERALES:**
   - Usa marcadores GEN√âRICOS que describan el TIPO de dato, no el dato espec√≠fico
   - Ejemplos correctos: [Motivo de consulta], [Antecedentes familiares], [Hallazgos del examen]
   - Ejemplos INCORRECTOS: [Dolor abdominal], [Diabetes], [Juan P√©rez]
   - NO preserves informaci√≥n espec√≠fica en los marcadores

4. **CONSERVAR ELEMENTOS ESTRUCTURALES NO ESPEC√çFICOS:**
   - Mant√©n frases estructurales como "Signos vitales:", "Antecedentes:", "Plan:"
   - Conserva palabras de enlace y estructura m√©dica general
   - Mant√©n terminolog√≠a m√©dica general no espec√≠fica al paciente

5. **ELIMINAR INFORMACI√ìN CONTEXTUAL ESPEC√çFICA:**
   - NO conserves hallazgos espec√≠ficos de la patolog√≠a original
   - NO mantengas valores normales espec√≠ficos si son del paciente particular
   - Reemplaza TODO lo que sea espec√≠fico del caso particular

6. **AGREGAR NOTA EXPLICATIVA:**
   - Al final, agrega: "NOTA: Esta es una plantilla ESTRUCTURAL. Los marcadores entre corchetes deben reemplazarse con datos reales del paciente."

7. **RESPUESTA FINAL:**
   - Responde √öNICAMENTE con la plantilla resultante
   - NO agregues comentarios, explicaciones adicionales, ni introducciones
   - La plantilla debe ser directamente utilizable como formato

RECUERDA: Est√°s creando un FORMATO REUTILIZABLE. Toda informaci√≥n espec√≠fica del paciente original debe convertirse en marcadores gen√©ricos. La plantilla resultante debe poder usarse para CUALQUIER paciente de cualquier edad, sexo o condici√≥n.`;

  try {
    const response = await openai.chat.completions.create({
      model: MEDICAL_AI_MODELS.IMPORTANT_MEDICAL_FUNCTIONS.generateTemplateFromClinicalNote,
      messages: [
        {
          role: "system",
          content: "Eres un experto en crear plantillas estructurales m√©dicas. Tu especialidad es convertir notas cl√≠nicas en formatos reutilizables eliminando TODA informaci√≥n espec√≠fica del paciente y creando marcadores gen√©ricos. Las plantillas resultantes son moldes vac√≠os sin datos reales."
        },
        {
          role: "user",
          content: prompt
        }
      ],
      temperature: TEMPERATURE_CONFIG.TEMPLATE_GENERATION,
      max_tokens: TOKEN_LIMITS.TEMPLATE_NOTE,
      top_p: 0.9
    });

    const generatedText = response.choices[0]?.message?.content || '';
    return {
      text: generatedText,
      groundingMetadata: undefined
    };
  } catch (error) {
    throw handleOpenAIError(error, 'generaci√≥n de plantilla desde nota cl√≠nica');
  }
}; 

export const updateClinicalNote = async (
  originalNote: string,
  newInformation: string
): Promise<{ text: string; groundingMetadata?: GroundingMetadata }> => {
  validateApiKey();

  const prompt = `Eres un asistente m√©dico experto especializado en actualizar notas cl√≠nicas existentes con nueva informaci√≥n de manera precisa y selectiva. Tu tarea es integrar √öNICAMENTE la nueva informaci√≥n proporcionada sin reescribir, inventar o modificar secciones que no requieren cambios.

**NOTA CL√çNICA ORIGINAL:**
---
${originalNote}
---

**NUEVA INFORMACI√ìN A INTEGRAR:**
---
${newInformation}
---

üö® **INSTRUCCIONES CR√çTICAS PARA ACTUALIZACI√ìN:**

1. **PRESERVACI√ìN ABSOLUTA DE LO EXISTENTE:**
   - Mant√©n EXACTAMENTE el mismo formato, estructura y estilo de la nota original
   - NO reescribas secciones que no requieren actualizaci√≥n
   - Conserva todos los encabezados, numeraci√≥n, vi√±etas y sangr√≠as tal como est√°n
   - Preserva el orden y la estructura de las secciones existentes
   - NO modifiques el estilo de redacci√≥n original

2. **INTEGRACI√ìN SOLO DE INFORMACI√ìN NUEVA:**
   - Usa √öNICAMENTE la nueva informaci√≥n proporcionada en la secci√≥n correspondiente
   - NO inventes, asumas, deduzcas o agregues informaci√≥n que no est√© expl√≠citamente en la nueva informaci√≥n
   - Si la nueva informaci√≥n no menciona algo espec√≠fico, NO lo agregues
   - NO hagas inferencias basadas en la nueva informaci√≥n

3. **ACTUALIZACI√ìN SELECTIVA PRECISA:**
   - Identifica espec√≠ficamente qu√© secci√≥n(es) deben actualizarse con la nueva informaci√≥n
   - Solo modifica las partes exactas que la nueva informaci√≥n actualiza o complementa
   - Si la nueva informaci√≥n es adicional, agr√©gala sin modificar lo existente
   - Si la nueva informaci√≥n reemplaza datos existentes, reemplaza SOLO esos datos espec√≠ficos

4. **MANEJO DE INFORMACI√ìN FALTANTE:**
   - Si la nueva informaci√≥n no es suficiente para completar una secci√≥n, NO la completes
   - NO agregues "pendiente", "a evaluar", "dato faltante" u observaciones similares
   - Simplemente integra lo que est√° disponible y deja el resto sin modificar

5. **AN√ÅLISIS INTELIGENTE DE UBICACI√ìN:**
   - Analiza d√≥nde pertenece la nueva informaci√≥n (evoluci√≥n, examen, tratamiento, etc.)
   - Respeta la l√≥gica temporal y m√©dica de la nota
   - Mant√©n la coherencia cl√≠nica entre la informaci√≥n original y la nueva
   - Coloca la nueva informaci√≥n en la secci√≥n m√°s apropiada

6. **INTEGRACI√ìN NATURAL:**
   - Integra la nueva informaci√≥n de forma fluida en el contexto existente
   - Usa el mismo estilo de redacci√≥n m√©dica de la nota original
   - Mant√©n la terminolog√≠a m√©dica consistente
   - Respeta el tono y formato profesional

7. **FORMATO DE RESPUESTA:**
   - Devuelve la nota cl√≠nica completa con SOLO las modificaciones necesarias
   - NO incluyas comentarios, explicaciones o notas adicionales
   - La respuesta debe ser directamente la nota m√©dica actualizada
   - NO agregues secciones de observaciones sobre los cambios

8. **EJEMPLOS DE ACTUALIZACI√ìN CORRECTA:**
   - Nueva informaci√≥n: "Presi√≥n arterial: 140/90 mmHg" ‚Üí Actualiza SOLO el valor en signos vitales
   - Nueva informaci√≥n: "Inici√≥ tratamiento con losart√°n" ‚Üí Agrega SOLO eso al plan de tratamiento
   - Nueva informaci√≥n incompleta: NO inventes el resto de la informaci√≥n

**REGLA FUNDAMENTAL:** Solo actualiza lo que est√° expl√≠citamente mencionado en la nueva informaci√≥n. NUNCA inventes, completes o asumas datos adicionales.`;

  try {
    const response = await openai.chat.completions.create({
      model: MEDICAL_AI_MODELS.CRITICAL_MEDICAL_FUNCTIONS.updateClinicalNote,
      messages: [
        {
          role: "system",
          content: "Eres un asistente m√©dico experto especializado en actualizar notas cl√≠nicas de forma selectiva y precisa. SOLO usas informaci√≥n expl√≠citamente proporcionada, NUNCA inventas datos adicionales. Preservas la estructura original y modificas √∫nicamente lo estrictamente necesario."
        },
        {
          role: "user",
          content: prompt
        }
      ],
      temperature: TEMPERATURE_CONFIG.CRITICAL_MEDICAL,
      max_tokens: TOKEN_LIMITS.CRITICAL_MEDICAL_NOTE,
      top_p: 0.8
    });

    const generatedText = response.choices[0]?.message?.content || '';
    return { 
      text: generatedText, 
      groundingMetadata: undefined
    };
  } catch (error) {
    throw handleOpenAIError(error, 'actualizaci√≥n selectiva de nota cl√≠nica');
  }
}; 

// ===== AN√ÅLISIS INTELIGENTE DE INFORMACI√ìN CL√çNICA =====





// ===== CONSULTA CL√çNICA PARA IA BASADA EN EVIDENCIA =====

export const analyzeClinicalContent = async (
  request: EvidenceConsultationRequest
): Promise<ClinicalAnalysisResult> => {
  validateApiKey();

  const prompt = `Eres un asistente m√©dico experto especializado en an√°lisis cl√≠nico basado en evidencia cient√≠fica. Tu tarea es analizar el contenido cl√≠nico proporcionado y generar recomendaciones basadas en la mejor evidencia disponible de fuentes cient√≠ficas reconocidas.

CONTENIDO CL√çNICO PARA AN√ÅLISIS:
---
${request.clinicalContent}
---

TIPO DE CONSULTA: ${request.consultationType}

${request.focusAreas ? `√ÅREAS DE ENFOQUE SOLICITADAS: ${request.focusAreas.join(', ')}` : ''}

${request.patientContext ? `CONTEXTO DEL PACIENTE:
- Edad: ${request.patientContext.age || 'No especificada'}
- Sexo: ${request.patientContext.sex || 'No especificado'}
- Comorbilidades: ${request.patientContext.comorbidities?.join(', ') || 'Ninguna reportada'}
- Alergias: ${request.patientContext.allergies?.join(', ') || 'Ninguna reportada'}
- Medicamentos actuales: ${request.patientContext.currentMedications?.join(', ') || 'Ninguno reportado'}` : ''}

INSTRUCCIONES PARA EL AN√ÅLISIS:

1. **EXTRACCI√ìN DE HALLAZGOS CL√çNICOS:**
   - Identifica s√≠ntomas, signos, diagn√≥sticos, tratamientos, resultados de laboratorio, signos vitales
   - Clasifica cada hallazgo por categor√≠a y severidad
   - Asigna un nivel de confianza basado en la claridad de la informaci√≥n

2. **GENERACI√ìN DE RECOMENDACIONES BASADAS EN EVIDENCIA:**
   - Para cada hallazgo, proporciona recomendaciones espec√≠ficas basadas en gu√≠as cl√≠nicas actuales
   - Cita fuentes cient√≠ficas reconocidas (PubMed, UpToDate, gu√≠as de sociedades m√©dicas)
   - Clasifica las recomendaciones por fuerza y calidad de evidencia
   - Considera aplicabilidad espec√≠fica al caso

3. **AN√ÅLISIS DE RIESGO Y BANDERAS ROJAS:**
   - Identifica factores de riesgo relevantes
   - Se√±ala cualquier signo de alarma que requiera atenci√≥n inmediata
   - Proporciona diagn√≥sticos diferenciales relevantes

4. **PLAN DIAGN√ìSTICO SUGERIDO:**
   - Recomienda estudios adicionales basados en los hallazgos
   - Prioriza seg√∫n urgencia y utilidad diagn√≥stica

FORMATO DE RESPUESTA REQUERIDO (JSON v√°lido):
{
  "findings": [
    {
      "id": "finding-1",
      "category": "symptom|sign|diagnosis|treatment|lab_result|vital_sign|medication|procedure",
      "description": "Descripci√≥n clara del hallazgo",
      "severity": "mild|moderate|severe|critical",
      "confidence": 0.85,
      "extractedText": "Texto original del que se extrajo"
    }
  ],
  "recommendations": [
    {
      "id": "rec-1",
      "category": "diagnostic|therapeutic|monitoring|prevention|prognosis|differential_diagnosis",
      "title": "T√≠tulo breve de la recomendaci√≥n",
      "description": "Descripci√≥n detallada de la recomendaci√≥n",
      "strength": "strong|conditional|expert_opinion",
      "evidenceQuality": "high|moderate|low|very_low",
      "applicability": 0.90,
      "urgency": "immediate|urgent|routine|elective",
      "contraindications": ["contraindicaci√≥n1"],
      "considerations": ["consideraci√≥n1"],
      "followUp": "Seguimiento recomendado",
      "sources": [
        {
          "type": "pubmed|uptodate|clinicalkey|cochrane|guidelines",
          "title": "T√≠tulo de la fuente",
          "authors": ["Autor1", "Autor2"],
          "journal": "Nombre de la revista",
          "year": 2023,
          "evidenceLevel": "A|B|C|D",
          "studyType": "rct|meta_analysis|cohort|case_control|case_series|expert_opinion"
        }
      ],
      "relatedFindings": ["finding-1"]
    }
  ],
  "riskFactors": ["factor de riesgo 1", "factor de riesgo 2"],
  "redFlags": ["bandera roja 1", "bandera roja 2"],
  "differentialDiagnoses": ["diagn√≥stico diferencial 1"],
  "suggestedWorkup": ["estudio sugerido 1", "estudio sugerido 2"],
  "confidence": 0.85,
  "analysisTimestamp": "${new Date().toISOString()}",
  "disclaimerText": "Esta informaci√≥n es para apoyo educativo y no sustituye el juicio cl√≠nico profesional. Siempre consulte las gu√≠as institucionales actuales y considere el contexto cl√≠nico completo."
}

CRITERIOS DE CALIDAD:
- Solo incluir recomendaciones con base cient√≠fica s√≥lida
- Priorizar evidencia de alta calidad (meta-an√°lisis, RCTs, gu√≠as cl√≠nicas)
- Ser espec√≠fico y pr√°ctico en las recomendaciones
- Considerar el contexto del paciente y aplicabilidad local
- Incluir disclaimers apropiados sobre limitaciones

Aseg√∫rate de que la respuesta sea un JSON v√°lido y completo.`;

  try {
    const response = await openai.chat.completions.create({
      model: MEDICAL_AI_MODELS.CRITICAL_MEDICAL_FUNCTIONS.analyzeClinicalContent,
      messages: [
        {
          role: "system",
          content: "Eres un asistente m√©dico experto en an√°lisis cl√≠nico basado en evidencia cient√≠fica. Proporcionas recomendaciones precisas basadas en la mejor evidencia disponible, siempre en formato JSON v√°lido."
        },
        {
          role: "user",
          content: prompt
        }
      ],
      temperature: TEMPERATURE_CONFIG.CLINICAL_REASONING,
      max_tokens: TOKEN_LIMITS.CLINICAL_ANALYSIS,
      top_p: 0.8
    });

    const responseText = response.choices[0]?.message?.content || '';
    
    try {
      const parsed = JSON.parse(responseText);
      
      // Validar estructura m√≠nima
      if (!parsed.findings || !parsed.recommendations) {
        throw new Error('Respuesta de IA inv√°lida: falta estructura de an√°lisis');
      }

      return parsed as ClinicalAnalysisResult;
    } catch (jsonError) {
      console.error('Error parsing clinical analysis response:', jsonError);
      throw new Error('La IA no pudo generar un an√°lisis v√°lido. Intenta con informaci√≥n cl√≠nica m√°s espec√≠fica.');
    }
  } catch (error) {
    throw handleOpenAIError(error, 'an√°lisis de contenido cl√≠nico');
  }
};

export const searchEvidenceBasedRecommendations = async (
  query: string,
  clinicalContext?: string
): Promise<EvidenceSearchResult> => {
  validateApiKey();

  const prompt = `Eres un experto en medicina basada en evidencia con acceso a las principales bases de datos m√©dicas. Tu tarea es buscar y proporcionar recomendaciones espec√≠ficas basadas en la mejor evidencia cient√≠fica disponible.

CONSULTA ESPEC√çFICA: "${query}"

${clinicalContext ? `CONTEXTO CL√çNICO ADICIONAL:
---
${clinicalContext}
---` : ''}

INSTRUCCIONES:
1. Busca evidencia espec√≠fica para la consulta planteada
2. Prioriza fuentes de alta calidad (PubMed, Cochrane, gu√≠as cl√≠nicas)
3. Proporciona recomendaciones pr√°cticas y aplicables
4. Incluye niveles de evidencia y fuerza de recomendaci√≥n
5. Considera contraindicaciones y consideraciones especiales

FORMATO DE RESPUESTA REQUERIDO (JSON v√°lido):
{
  "query": "${query}",
  "sources": [
    {
      "type": "pubmed|uptodate|cochrane|guidelines",
      "title": "T√≠tulo espec√≠fico de la fuente",
      "authors": ["Apellido A", "Apellido B"],
      "journal": "Nombre de la revista",
      "year": 2023,
      "pmid": "12345678",
      "evidenceLevel": "A|B|C|D",
      "studyType": "meta_analysis|rct|cohort|guidelines"
    }
  ],
  "recommendations": [
    {
      "id": "search-rec-1",
      "category": "diagnostic|therapeutic|monitoring|prevention",
      "title": "Recomendaci√≥n espec√≠fica",
      "description": "Descripci√≥n detallada basada en evidencia",
      "strength": "strong|conditional|expert_opinion",
      "evidenceQuality": "high|moderate|low|very_low",
      "applicability": 0.85,
      "urgency": "immediate|urgent|routine|elective",
      "sources": [/* referencias a las fuentes arriba */],
      "relatedFindings": []
    }
  ],
  "searchTimestamp": "${new Date().toISOString()}",
  "totalResults": 5,
  "searchStrategy": "Descripci√≥n de la estrategia de b√∫squeda utilizada"
}

Enf√≥cate en proporcionar informaci√≥n pr√°ctica y actualizada que sea directamente aplicable al contexto cl√≠nico.`;

  try {
    const response = await openai.chat.completions.create({
      model: MEDICAL_AI_MODELS.IMPORTANT_MEDICAL_FUNCTIONS.searchEvidenceBasedRecommendations,
      messages: [
        {
          role: "system",
          content: "Eres un experto en medicina basada en evidencia que proporciona b√∫squedas precisas en literatura m√©dica. Respondes siempre en formato JSON v√°lido con informaci√≥n cient√≠ficamente respaldada."
        },
        {
          role: "user",
          content: prompt
        }
      ],
      temperature: TEMPERATURE_CONFIG.EVIDENCE_SUGGESTIONS,
      max_tokens: TOKEN_LIMITS.EVIDENCE_SUGGESTIONS,
      top_p: 0.8
    });

    const responseText = response.choices[0]?.message?.content || '';
    
    try {
      const parsed = JSON.parse(responseText);
      return parsed as EvidenceSearchResult;
    } catch (jsonError) {
      console.error('Error parsing evidence search response:', jsonError);
      throw new Error('La IA no pudo generar resultados de b√∫squeda v√°lidos.');
    }
  } catch (error) {
    throw handleOpenAIError(error, 'b√∫squeda de recomendaciones basadas en evidencia');
  }
};

export const generateEvidenceBasedConsultation = async (
  clinicalContent: string,
  specificQuestions?: string[]
): Promise<{ analysis: ClinicalAnalysisResult; evidenceSearch?: EvidenceSearchResult }> => {
  validateApiKey();

  // Configurar la solicitud de consulta
  const consultationRequest: EvidenceConsultationRequest = {
    clinicalContent,
    consultationType: 'comprehensive',
    focusAreas: specificQuestions
  };

  try {
    // Realizar an√°lisis cl√≠nico completo
    const analysis = await analyzeClinicalContent(consultationRequest);

    // Si hay preguntas espec√≠ficas, realizar b√∫squeda adicional
    let evidenceSearch: EvidenceSearchResult | undefined;
    if (specificQuestions && specificQuestions.length > 0) {
      const combinedQuery = specificQuestions.join(' AND ');
      evidenceSearch = await searchEvidenceBasedRecommendations(combinedQuery, clinicalContent);
    }

    return {
      analysis,
      evidenceSearch
    };
  } catch (error) {
    throw handleOpenAIError(error, 'generaci√≥n de consulta basada en evidencia');
  }
};

export const formatEvidenceBasedReport = async (
  analysisResult: ClinicalAnalysisResult,
  evidenceSearch?: EvidenceSearchResult,
  includeReferences: boolean = true
): Promise<string> => {
  let report = `**CONSULTA CL√çNICA BASADA EN EVIDENCIA**\n\n`;
  
  // Timestamp
  report += `Fecha del an√°lisis: ${new Date(analysisResult.analysisTimestamp).toLocaleString('es-ES')}\n`;
  report += `Confianza del an√°lisis: ${Math.round(analysisResult.confidence * 100)}%\n\n`;

  // Hallazgos cl√≠nicos principales
  if (analysisResult.findings.length > 0) {
    report += `**HALLAZGOS CL√çNICOS IDENTIFICADOS:**\n`;
    analysisResult.findings.forEach((finding, index) => {
      report += `${index + 1}. **${finding.category.toUpperCase()}**: ${finding.description}\n`;
      if (finding.severity) {
        report += `   - Severidad: ${finding.severity}\n`;
      }
      report += `   - Confianza: ${Math.round(finding.confidence * 100)}%\n\n`;
    });
  }

  // Banderas rojas
  if (analysisResult.redFlags.length > 0) {
    report += `**üö© BANDERAS ROJAS - ATENCI√ìN INMEDIATA:**\n`;
    analysisResult.redFlags.forEach(flag => {
      report += `‚Ä¢ ${flag}\n`;
    });
    report += `\n`;
  }

  // Recomendaciones principales
  if (analysisResult.recommendations.length > 0) {
    report += `**RECOMENDACIONES BASADAS EN EVIDENCIA:**\n\n`;
    
    // Agrupar por urgencia
    const immediateRecs = analysisResult.recommendations.filter(r => r.urgency === 'immediate');
    const urgentRecs = analysisResult.recommendations.filter(r => r.urgency === 'urgent');
    const routineRecs = analysisResult.recommendations.filter(r => r.urgency === 'routine');

    if (immediateRecs.length > 0) {
      report += `**INMEDIATAS:**\n`;
      immediateRecs.forEach((rec, index) => {
        report += `${index + 1}. **${rec.title}**\n`;
        report += `   ${rec.description}\n`;
        report += `   - Fuerza: ${rec.strength} | Calidad evidencia: ${rec.evidenceQuality}\n`;
        if (rec.contraindications && rec.contraindications.length > 0) {
          report += `   - Contraindicaciones: ${rec.contraindications.join(', ')}\n`;
        }
        report += `\n`;
      });
    }

    if (urgentRecs.length > 0) {
      report += `**URGENTES:**\n`;
      urgentRecs.forEach((rec, index) => {
        report += `${index + 1}. **${rec.title}**\n`;
        report += `   ${rec.description}\n`;
        report += `   - Fuerza: ${rec.strength} | Calidad evidencia: ${rec.evidenceQuality}\n\n`;
      });
    }

    if (routineRecs.length > 0) {
      report += `**RUTINARIAS:**\n`;
      routineRecs.forEach((rec, index) => {
        report += `${index + 1}. **${rec.title}**\n`;
        report += `   ${rec.description}\n`;
        report += `   - Fuerza: ${rec.strength} | Calidad evidencia: ${rec.evidenceQuality}\n\n`;
      });
    }
  }

  // Diagn√≥sticos diferenciales
  if (analysisResult.differentialDiagnoses.length > 0) {
    report += `**DIAGN√ìSTICOS DIFERENCIALES A CONSIDERAR:**\n`;
    analysisResult.differentialDiagnoses.forEach(dx => {
      report += `‚Ä¢ ${dx}\n`;
    });
    report += `\n`;
  }

  // Plan diagn√≥stico sugerido
  if (analysisResult.suggestedWorkup.length > 0) {
    report += `**PLAN DIAGN√ìSTICO SUGERIDO:**\n`;
    analysisResult.suggestedWorkup.forEach(study => {
      report += `‚Ä¢ ${study}\n`;
    });
    report += `\n`;
  }

  // Referencias principales (si se incluyen)
  if (includeReferences && analysisResult.recommendations.length > 0) {
    const allSources = analysisResult.recommendations
      .flatMap(rec => rec.sources)
      .filter((source, index, self) => 
        index === self.findIndex(s => s.title === source.title)
      );

    if (allSources.length > 0) {
      report += `**REFERENCIAS PRINCIPALES:**\n`;
      allSources.forEach((source, index) => {
        report += `${index + 1}. ${source.title}`;
        if (source.authors && source.authors.length > 0) {
          report += ` - ${source.authors.join(', ')}`;
        }
        if (source.journal && source.year) {
          report += ` (${source.journal}, ${source.year})`;
        }
        report += ` [Nivel evidencia: ${source.evidenceLevel}]\n`;
      });
      report += `\n`;
    }
  }

  // Evidencia adicional si existe
  if (evidenceSearch && evidenceSearch.recommendations.length > 0) {
    report += `**EVIDENCIA ADICIONAL ENCONTRADA:**\n`;
    evidenceSearch.recommendations.forEach((rec, index) => {
      report += `${index + 1}. ${rec.title}: ${rec.description}\n`;
    });
    report += `\n`;
  }

  // Disclaimer
  report += `**IMPORTANTE:**\n${analysisResult.disclaimerText}\n`;

  return report;
}; 

// ===== CONSULTA CL√çNICA SIMPLIFICADA BASADA EN EVIDENCIA =====

export const generateSimplifiedEvidenceConsultation = async (
  clinicalContent: string
): Promise<{ text: string; groundingMetadata?: GroundingMetadata }> => {
  validateApiKey();

  const prompt = `Eres un m√©dico especialista experto en medicina basada en evidencia. Analiza el siguiente contenido cl√≠nico y proporciona recomendaciones fundamentadas en evidencia cient√≠fica actual.

CONTENIDO CL√çNICO:
---
${clinicalContent}
---

INSTRUCCIONES:
1. **AN√ÅLISIS CL√çNICO:**
   - Identifica los hallazgos principales
   - Eval√∫a la informaci√≥n disponible
   - Destaca aspectos relevantes o preocupantes

2. **RECOMENDACIONES BASADAS EN EVIDENCIA:**
   - Proporciona sugerencias diagn√≥sticas fundamentadas
   - Incluye opciones terap√©uticas respaldadas por evidencia
   - Menciona estudios complementarios si son necesarios
   - Sugiere seguimiento apropiado

3. **CITAS CIENT√çFICAS:**
   - Incluye referencias a estudios recientes
   - Cita gu√≠as cl√≠nicas relevantes
   - Menciona consensos de sociedades m√©dicas
   - Especifica niveles de evidencia cuando sea apropiado

4. **FORMATO DE RESPUESTA:**
   - Estructura clara y profesional
   - Lenguaje m√©dico apropiado
   - Citas cient√≠ficas integradas naturalmente
   - Disclaimer sobre individualizaci√≥n del tratamiento

FUENTES RECOMENDADAS PARA CITAR:
- PubMed/MEDLINE
- Cochrane Library
- UpToDate
- Gu√≠as de sociedades m√©dicas especializadas
- New England Journal of Medicine
- The Lancet
- JAMA
- BMJ

Proporciona un an√°lisis completo y recomendaciones pr√°cticas que apoyen la toma de decisiones cl√≠nicas.`;

  try {
    const response = await openai.chat.completions.create({
      model: MEDICAL_AI_MODELS.IMPORTANT_MEDICAL_FUNCTIONS.generateSimplifiedEvidenceConsultation,
      messages: [
        {
          role: "system",
          content: "Eres un m√©dico especialista experto en medicina basada en evidencia. Proporcionas an√°lisis cl√≠nicos completos con recomendaciones respaldadas por literatura cient√≠fica actual. Siempre incluyes citas relevantes y mantienes un enfoque pr√°ctico y profesional."
        },
        {
          role: "user",
          content: prompt
        }
      ],
      temperature: TEMPERATURE_CONFIG.CONSULTATION,
      max_tokens: TOKEN_LIMITS.CONSULTATION,
      top_p: 0.9
    });

    const result = response.choices[0]?.message?.content || '';
    
    if (!result.trim()) {
      throw new Error('No se pudo generar contenido v√°lido');
    }
    
    return {
      text: result,
      groundingMetadata: { groundingChunks: [] }
    };
  } catch (error) {
    throw handleOpenAIError(error, 'generaci√≥n de consulta basada en evidencia simplificada');
  }
};

// ===== EXTRACCI√ìN DE FORMATO DE PLANTILLA =====

export const extractTemplateFormat = async (
  templateContent: string
): Promise<string> => {
  validateApiKey();

  // Validar entrada
  if (!templateContent || typeof templateContent !== 'string') {
    throw new Error('El contenido de la plantilla no es v√°lido');
  }

  const trimmedContent = templateContent.trim();
  if (trimmedContent.length === 0) {
    throw new Error('La plantilla est√° vac√≠a');
  }

  if (trimmedContent.length > 15000) {
    throw new Error('La plantilla es demasiado larga. Por favor, reduce el contenido a menos de 15,000 caracteres.');
  }

  const prompt = `Eres un experto en crear MOLDES ESTRUCTURALES de documentos m√©dicos. Tu tarea es extraer √öNICAMENTE la estructura/formato de la plantilla, convirtiendo todos los datos espec√≠ficos en marcadores gen√©ricos.

üéØ OBJETIVO: Crear un FORMATO PURO reutilizable eliminando TODA informaci√≥n espec√≠fica del paciente original.

PLANTILLA ORIGINAL:
---
${trimmedContent}
---

üö® INSTRUCCIONES CR√çTICAS PARA EXTRACCI√ìN DE FORMATO:

1. **PRESERVAR ESTRUCTURA VISUAL EXACTA:**
   - Mant√©n EXACTAMENTE: encabezados, may√∫sculas/min√∫sculas, vi√±etas, numeraci√≥n, sangr√≠as
   - Conserva espacios en blanco, saltos de l√≠nea, tabulaciones
   - Preserva todos los elementos visuales: dos puntos (:), guiones (-), n√∫meros, etc.
   - NO cambies la jerarqu√≠a ni organizaci√≥n de secciones

2. **ELIMINAR TODA INFORMACI√ìN ESPEC√çFICA:**
   - Nombres de pacientes ‚Üí [Nombre del paciente]
   - Edades espec√≠ficas ‚Üí [Edad] a√±os
   - Fechas espec√≠ficas ‚Üí [Fecha]
   - N√∫meros de documento ‚Üí [Documento de identidad]
   - S√≠ntomas espec√≠ficos ‚Üí [Describir s√≠ntoma]
   - Diagn√≥sticos espec√≠ficos ‚Üí [Diagn√≥stico]
   - Medicamentos espec√≠ficos ‚Üí [Medicamento]
   - Valores de laboratorio espec√≠ficos ‚Üí [Valor de laboratorio]
   - Signos vitales espec√≠ficos ‚Üí [Signos vitales]
   - Nombres de m√©dicos ‚Üí [Nombre del m√©dico]
   - Hallazgos espec√≠ficos ‚Üí [Hallazgos del examen]

3. **CREAR MARCADORES GEN√âRICOS:**
   - Usa marcadores que describan el TIPO de informaci√≥n, no el contenido espec√≠fico
   - Ejemplos CORRECTOS: [Motivo de consulta], [Antecedentes familiares], [Plan de tratamiento]
   - Ejemplos INCORRECTOS: [Dolor de cabeza], [Diabetes], [Paracetamol]
   - Los marcadores deben ser aplicables a CUALQUIER paciente

4. **CONSERVAR SOLO ELEMENTOS ESTRUCTURALES:**
   - Mant√©n etiquetas como "Nombre:", "Edad:", "Diagn√≥stico:", etc.
   - Conserva frases estructurales no espec√≠ficas
   - Preserva numeraci√≥n y vi√±etas de listas
   - Mant√©n encabezados de secciones

5. **ELIMINAR CONTEXTO ESPEC√çFICO:**
   - NO conserves hallazgos espec√≠ficos de una patolog√≠a particular
   - NO mantengas valores espec√≠ficos aunque sean "normales"
   - Reemplaza TODO lo que sea espec√≠fico del paciente original
   - La plantilla debe ser universalmente aplicable

6. **TRANSFORMACIONES EJEMPLO:**
   - "Paciente: Mar√≠a Gonz√°lez" ‚Üí "Paciente: [Nombre del paciente]"
   - "Edad: 35 a√±os" ‚Üí "Edad: [Edad] a√±os"
   - "Presenta dolor tor√°cico opresivo" ‚Üí "Presenta [Describir s√≠ntoma]"
   - "Losart√°n 50mg cada 12 horas" ‚Üí "[Medicamento] [Dosis y frecuencia]"
   - "Presi√≥n arterial: 120/80 mmHg" ‚Üí "Presi√≥n arterial: [Valor]"

7. **RESPUESTA FINAL:**
   - Responde √öNICAMENTE con el formato extra√≠do
   - NO agregues comentarios, explicaciones, ni introducciones
   - La plantilla debe ser un MOLDE VAC√çO directamente utilizable

RESULTADO ESPERADO: Una plantilla estructural que mantenga la organizaci√≥n visual exacta pero que pueda usarse para CUALQUIER paciente, sin datos espec√≠ficos del caso original.`;

  try {
    const response = await openai.chat.completions.create({
      model: MEDICAL_AI_MODELS.AUXILIARY_FUNCTIONS.extractTemplateFormat,
      messages: [
        {
          role: "system",
          content: "Eres un experto en crear moldes estructurales de documentos m√©dicos. Tu especialidad es convertir plantillas con datos espec√≠ficos en formatos puros reutilizables, eliminando TODA informaci√≥n del paciente original y creando marcadores gen√©ricos universales."
        },
        {
          role: "user",
          content: prompt
        }
      ],
      temperature: TEMPERATURE_CONFIG.FORMAT_EXTRACTION,
      max_tokens: TOKEN_LIMITS.FORMAT_EXTRACTION,
      top_p: 0.8
    });

    const result = response.choices[0]?.message?.content || '';
    
    if (!result.trim()) {
      throw new Error('No se pudo extraer el formato de la plantilla. Intenta con una plantilla m√°s espec√≠fica.');
    }

    return result;
  } catch (error) {
    throw handleOpenAIError(error, 'extracci√≥n de formato de plantilla');
  }
}; 

// =============================================================================
// UTILIDADES
// =============================================================================

export const validateOpenAIConfiguration = (): boolean => {
  return Boolean(API_KEY);
};

export const getOpenAIModelInfo = () => {
  return {
    textModel: OPENAI_MODEL_TEXT,
    advancedModel: OPENAI_MODEL_ADVANCED,
    latestModel: OPENAI_MODEL_LATEST,
    reasoningModel: OPENAI_MODEL_REASONING,
    medicalModels: MEDICAL_AI_MODELS,
    temperatureConfig: TEMPERATURE_CONFIG,
    tokenLimits: TOKEN_LIMITS,
  };
}; 