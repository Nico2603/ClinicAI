'use client';

// Extender Window para debugging
declare global {
  interface Window {
    debugDB?: {
      info: () => void;
      help: () => void;
      deepgram: () => void;
    };
  }
}

import { useState } from 'react';
import { useDeepgramSpeech } from '../hooks/useDeepgramSpeech';
import { diagnosDeepgramIssues, diagnosDeepgramAdvanced, type DeepgramDiagnostic } from '../lib/utils/index';

// Componente de debugging simplificado - Solo para desarrollo
export const Debug = () => {
  const [diagnostic, setDiagnostic] = useState<DeepgramDiagnostic | null>(null);
  const [connectionTestResult, setConnectionTestResult] = useState<boolean | null>(null);
  const [isTestingConnection, setIsTestingConnection] = useState(false);

  const {
    isRecording,
    isSupported,
    interimTranscript,
    error,
    startRecording,
    stopRecording,
    clearTranscripts,
    testConnection
  } = useDeepgramSpeech({
    onTranscript: (transcript: string) => {
      console.log('üìù Transcripci√≥n recibida:', transcript);
    },
    onError: (error: string) => {
      console.error('‚ùå Error de transcripci√≥n:', error);
    },
    onStart: () => {
      console.log('üé§ Transcripci√≥n iniciada');
    },
    onEnd: () => {
      console.log('‚èπÔ∏è Transcripci√≥n terminada');
    }
  });

  const handleTestConnection = async () => {
    console.log('üîç Iniciando prueba de conexi√≥n con Deepgram...');
    setIsTestingConnection(true);
    setConnectionTestResult(null);
    
    try {
      const success = await testConnection();
      setConnectionTestResult(success);
      console.log(success ? '‚úÖ Prueba exitosa' : '‚ùå Prueba fall√≥');
    } catch (error) {
      console.error('‚ùå Error en prueba de conexi√≥n:', error);
      setConnectionTestResult(false);
    } finally {
      setIsTestingConnection(false);
    }
  };

  const handleRunDiagnostic = () => {
    console.log('üîç Ejecutando diagn√≥stico b√°sico de Deepgram...');
    const result = diagnosDeepgramIssues();
    setDiagnostic(result);
    console.log('üìä Resultado del diagn√≥stico b√°sico:', result);
  };

  const handleRunAdvancedDiagnostic = async () => {
    console.log('üîç Ejecutando diagn√≥stico avanzado de Deepgram...');
    setDiagnostic(null); // Limpiar resultado anterior
    
    try {
      const result = await diagnosDeepgramAdvanced();
      setDiagnostic(result);
      console.log('üìä Resultado del diagn√≥stico avanzado:', result);
      
      // Mostrar resumen en consola
      if (result.apiKeyValid === false) {
        console.error('üö® PROBLEMA IDENTIFICADO: API key inv√°lida o sin cr√©ditos');
      } else if (result.connectivityTest?.websocket === false) {
        console.error('üö® PROBLEMA IDENTIFICADO: WebSockets bloqueados');
      } else {
        console.log('‚úÖ API key y conectividad OK - puede ser un problema temporal');
      }
    } catch (error) {
      console.error('‚ùå Error en diagn√≥stico avanzado:', error);
    }
  };

  // No hacer nada en producci√≥n para evitar errores
  if (process.env.NODE_ENV === 'production') {
    return null;
  }
  
  // Solo agregar funciones b√°sicas en desarrollo sin operaciones pesadas
  if (typeof window !== 'undefined' && !window.debugDB) {
    window.debugDB = {
      info: () => console.log('üõ†Ô∏è Debug mode enabled. Basic functions available.'),
      help: () => console.log('Use debugDB.info() for debug information'),
      deepgram: async () => {
        console.log('üîç Ejecutando diagn√≥stico avanzado...');
        const result = await diagnosDeepgramAdvanced();
        console.log('üìä Diagn√≥stico avanzado de Deepgram:', result);
        
        if (result.apiKeyValid === false) {
          console.error('üö® PROBLEMA: API key inv√°lida o sin cr√©ditos');
        } else if (result.connectivityTest?.websocket === false) {
          console.error('üö® PROBLEMA: WebSockets bloqueados por firewall/proxy');
        } else {
          console.log('‚úÖ Configuraci√≥n OK - puede ser problema temporal');
        }
      }
    };

    // Configurar test de plantillas b√°sico
    import('@/lib/test-templates').then(({ setupTemplateTest }) => {
      setupTemplateTest();
    }).catch(console.error);
  }

  return (
    <div className="p-6 bg-gray-50 rounded-lg space-y-4">
      <h2 className="text-xl font-bold text-gray-800">üõ†Ô∏è Debug - Deepgram Speech</h2>
      
      {/* Estado actual */}
      <div className="grid grid-cols-2 gap-4">
        <div className="p-3 bg-white rounded border">
          <h3 className="font-semibold text-sm text-gray-600">Estado</h3>
          <p className={isRecording ? 'text-red-600' : 'text-gray-800'}>
            {isRecording ? 'üî¥ Grabando' : '‚ö™ Detenido'}
          </p>
        </div>
        
        <div className="p-3 bg-white rounded border">
          <h3 className="font-semibold text-sm text-gray-600">Soporte</h3>
          <p className={isSupported ? 'text-green-600' : 'text-red-600'}>
            {isSupported ? '‚úÖ Soportado' : '‚ùå No soportado'}
          </p>
        </div>
      </div>

      {/* Controles de diagn√≥stico */}
      <div className="space-y-2">
        <button 
          onClick={handleRunDiagnostic}
          className="w-full p-2 bg-purple-500 text-white rounded hover:bg-purple-600 transition-colors"
        >
          üîç Diagn√≥stico B√°sico
        </button>
        
        <button 
          onClick={handleRunAdvancedDiagnostic}
          className="w-full p-2 bg-indigo-600 text-white rounded hover:bg-indigo-700 transition-colors"
        >
          üöÄ Diagn√≥stico Avanzado (Verifica API Key)
        </button>
        
        <button 
          onClick={handleTestConnection}
          className="w-full p-2 bg-blue-500 text-white rounded hover:bg-blue-600 transition-colors"
          disabled={!isSupported || isTestingConnection}
        >
          {isTestingConnection ? 'üîÑ Probando...' : 'üåê Probar Conexi√≥n con Deepgram'}
        </button>
      </div>

      {/* Resultado de prueba de conexi√≥n */}
      {connectionTestResult !== null && (
        <div className={`p-3 rounded border ${
          connectionTestResult 
            ? 'bg-green-50 border-green-200' 
            : 'bg-red-50 border-red-200'
        }`}>
          <h3 className="font-semibold text-sm mb-2">Resultado de Prueba de Conexi√≥n:</h3>
          <p className={connectionTestResult ? 'text-green-600' : 'text-red-600'}>
            {connectionTestResult 
              ? '‚úÖ Conexi√≥n exitosa con Deepgram' 
              : '‚ùå Fall√≥ la conexi√≥n con Deepgram'
            }
          </p>
        </div>
      )}

      {/* Diagn√≥stico completo */}
      {diagnostic && (
        <div className="p-3 bg-white rounded border">
          <h3 className="font-semibold text-sm text-gray-600 mb-3">üìä Diagn√≥stico Completo:</h3>
          
          <div className="space-y-3">
            {/* Informaci√≥n del sistema */}
            <div className="grid grid-cols-2 gap-2 text-sm">
              <div>
                <span className="font-medium">Navegador:</span> {diagnostic.browserInfo}
              </div>
              <div>
                <span className="font-medium">Contexto seguro:</span> 
                <span className={diagnostic.isSecureContext ? 'text-green-600' : 'text-red-600'}>
                  {diagnostic.isSecureContext ? ' ‚úÖ' : ' ‚ùå'}
                </span>
              </div>
              <div>
                <span className="font-medium">API Key:</span> 
                <span className={diagnostic.hasApiKey ? 'text-green-600' : 'text-red-600'}>
                  {diagnostic.hasApiKey 
                    ? ` ‚úÖ Configurada (${diagnostic.apiKeyLength} chars)` 
                    : ' ‚ùå No configurada'
                  }
                </span>
              </div>
              {diagnostic.apiKeyValid !== undefined && (
                <div>
                  <span className="font-medium">API Key v√°lida:</span> 
                  <span className={diagnostic.apiKeyValid ? 'text-green-600' : 'text-red-600'}>
                    {diagnostic.apiKeyValid ? ' ‚úÖ V√°lida' : ' ‚ùå Inv√°lida'}
                  </span>
                </div>
              )}
              <div>
                <span className="font-medium">WebSocket:</span> 
                <span className={diagnostic.hasWebSocket ? 'text-green-600' : 'text-red-600'}>
                  {diagnostic.hasWebSocket ? ' ‚úÖ' : ' ‚ùå'}
                </span>
              </div>
              <div>
                <span className="font-medium">MediaRecorder:</span> 
                <span className={diagnostic.hasMediaRecorder ? 'text-green-600' : 'text-red-600'}>
                  {diagnostic.hasMediaRecorder ? ' ‚úÖ' : ' ‚ùå'}
                </span>
              </div>
              <div>
                <span className="font-medium">getUserMedia:</span> 
                <span className={diagnostic.hasGetUserMedia ? 'text-green-600' : 'text-red-600'}>
                  {diagnostic.hasGetUserMedia ? ' ‚úÖ' : ' ‚ùå'}
                </span>
              </div>
            </div>

            {/* Test de conectividad avanzado */}
            {diagnostic.connectivityTest && (
              <div className="mt-3 p-3 bg-gray-50 rounded border">
                <h4 className="font-semibold text-sm text-gray-700 mb-2">üß™ Tests de Conectividad:</h4>
                <div className="space-y-1 text-sm">
                  <div>
                    <span className="font-medium">REST API:</span>
                    <span className={diagnostic.connectivityTest.restApi ? 'text-green-600' : 'text-red-600'}>
                      {diagnostic.connectivityTest.restApi ? ' ‚úÖ OK' : ' ‚ùå Falla'}
                    </span>
                  </div>
                  <div>
                    <span className="font-medium">WebSocket:</span>
                    <span className={diagnostic.connectivityTest.websocket ? 'text-green-600' : 'text-red-600'}>
                      {diagnostic.connectivityTest.websocket ? ' ‚úÖ OK' : ' ‚ùå Bloqueado'}
                    </span>
                  </div>
                </div>
                
                {/* An√°lisis de resultados */}
                <div className="mt-2 text-xs">
                  {!diagnostic.connectivityTest.restApi && (
                    <p className="text-red-600 font-medium">
                      üö® API key inv√°lida o cuenta sin cr√©ditos
                    </p>
                  )}
                  {diagnostic.connectivityTest.restApi && !diagnostic.connectivityTest.websocket && (
                    <p className="text-orange-600 font-medium">
                      üî• API key OK pero WebSockets bloqueados (firewall/proxy)
                    </p>
                  )}
                  {diagnostic.connectivityTest.restApi && diagnostic.connectivityTest.websocket && (
                    <p className="text-green-600 font-medium">
                      ‚úÖ Conectividad OK - problema puede ser temporal
                    </p>
                  )}
                </div>
              </div>
            )}

            {/* Recomendaciones */}
            <div>
              <h4 className="font-semibold text-sm text-gray-700 mb-2">üí° Recomendaciones:</h4>
              <div className="space-y-1">
                {diagnostic.recommendations.map((rec: string, index: number) => (
                  <p key={index} className="text-sm text-gray-600 bg-gray-50 p-2 rounded">
                    {rec}
                  </p>
                ))}
              </div>
            </div>
          </div>
        </div>
      )}

      {/* Controles de grabaci√≥n */}
      <div className="space-y-2">
        <button 
          onClick={startRecording}
          className="w-full p-2 bg-green-500 text-white rounded hover:bg-green-600 transition-colors disabled:bg-gray-400"
          disabled={!isSupported || isRecording}
        >
          üé§ {isRecording ? 'Grabando...' : 'Iniciar Grabaci√≥n'}
        </button>
        
        {isRecording && (
          <button 
            onClick={stopRecording}
            className="w-full p-2 bg-red-500 text-white rounded hover:bg-red-600 transition-colors"
          >
            ‚èπÔ∏è Detener Grabaci√≥n
          </button>
        )}
        
        <button 
          onClick={clearTranscripts}
          className="w-full p-2 bg-gray-500 text-white rounded hover:bg-gray-600 transition-colors"
        >
          üóëÔ∏è Limpiar Transcripci√≥n
        </button>
      </div>

      {/* Transcripci√≥n en tiempo real */}
      {interimTranscript && (
        <div className="p-3 bg-yellow-50 border border-yellow-200 rounded">
          <h3 className="font-semibold text-sm text-gray-600 mb-2">Transcripci√≥n en tiempo real:</h3>
          <p className="text-sm italic text-gray-600">{interimTranscript}</p>
        </div>
      )}

      {/* Errores */}
      {error && (
        <div className="p-3 bg-red-50 border border-red-200 rounded">
          <h3 className="font-semibold text-sm text-red-600 mb-2">‚ùå Error:</h3>
          <p className="text-sm text-red-600 font-mono">{error}</p>
          
          {/* Soluciones r√°pidas para errores comunes */}
          <div className="mt-3 text-sm">
            <h4 className="font-semibold text-red-700 mb-1">üí° Posibles soluciones:</h4>
            <ul className="space-y-1 text-red-600">
              {error.includes('API key') && (
                <li>‚Ä¢ Verifica que la API key de Deepgram sea v√°lida y tenga cr√©ditos</li>
              )}
              {error.includes('conexi√≥n') && (
                <>
                  <li>‚Ä¢ Verifica tu conexi√≥n a internet</li>
                  <li>‚Ä¢ Revisa si hay firewalls bloqueando websockets</li>
                  <li>‚Ä¢ Intenta refrescar la p√°gina</li>
                </>
              )}
              {error.includes('micr√≥fono') && (
                <li>‚Ä¢ Permite el acceso al micr√≥fono en tu navegador</li>
              )}
              {error.includes('navegador') && (
                <li>‚Ä¢ Usa Chrome, Firefox o Edge para mejor compatibilidad</li>
              )}
              <li>‚Ä¢ Ejecuta el diagn√≥stico completo para m√°s informaci√≥n</li>
            </ul>
          </div>
        </div>
      )}

      {/* Informaci√≥n adicional */}
      <div className="text-xs text-gray-500 space-y-1 bg-gray-100 p-3 rounded">
        <h4 className="font-semibold text-gray-700">‚ÑπÔ∏è Informaci√≥n de Debug:</h4>
        <p><strong>Consola:</strong> Abre las herramientas de desarrollador (F12) para logs detallados</p>
        <p><strong>Comandos:</strong> Usa <code>debugDB.deepgram()</code> en la consola para diagn√≥stico r√°pido</p>
        <p><strong>Ambiente:</strong> {process.env.NODE_ENV}</p>
        <p><strong>URL:</strong> {typeof window !== 'undefined' ? window.location.origin : 'Server'}</p>
      </div>
    </div>
  );
};

export default Debug; 